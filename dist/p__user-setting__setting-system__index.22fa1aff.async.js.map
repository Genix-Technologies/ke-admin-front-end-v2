{"version":3,"file":"p__user-setting__setting-system__index.22fa1aff.async.js","mappings":"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","sources":["webpack:///./src/pages/user-setting/setting-system/index.less?3542","webpack:///./src/pages/user-setting/setting-system/task-bar-chat.tsx","webpack:///./src/pages/user-setting/setting-system/index.tsx","webpack:///./src/utils/date.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"systemInfo\":\"systemInfo___ufsjg\",\"title\":\"title___g9daS\",\"text\":\"text___dsVaC\",\"badge\":\"badge___lUCbZ\",\"error\":\"error___DIP2V\",\"taskBarTooltip\":\"taskBarTooltip___q4jfc\",\"taskBar\":\"taskBar___cTWDX\",\"taskBarTitle\":\"taskBarTitle___iiila\"};","import { TaskExecutorHeartbeatItem } from '@/interfaces/database/user-setting';\nimport { Divider, Flex } from 'antd';\nimport {\n  Bar,\n  BarChart,\n  CartesianGrid,\n  Legend,\n  Rectangle,\n  ResponsiveContainer,\n  Tooltip,\n  XAxis,\n} from 'recharts';\n\nimport { formatDate, formatTime } from '@/utils/date';\nimport dayjs from 'dayjs';\nimport { get } from 'lodash';\nimport JsonView from 'react18-json-view';\nimport 'react18-json-view/src/style.css';\n\nimport styles from './index.less';\n\ninterface IProps {\n  data: Record<string, TaskExecutorHeartbeatItem[]>;\n}\n\nconst CustomTooltip = ({ active, payload, ...restProps }: any) => {\n  if (active && payload && payload.length) {\n    const taskExecutorHeartbeatItem: TaskExecutorHeartbeatItem = get(\n      payload,\n      '0.payload',\n      {},\n    );\n    return (\n      <div className=\"custom-tooltip\">\n        <div className=\"bg-slate-50 p-2 rounded-md border border-indigo-100\">\n          <div className=\"font-semibold text-lg\">\n            {formatDate(restProps.label)}\n          </div>\n\n          <JsonView\n            src={taskExecutorHeartbeatItem}\n            displaySize={30}\n            className=\"w-full max-h-[300px] break-words overflow-auto\"\n          />\n        </div>\n      </div>\n    );\n  }\n\n  return null;\n};\n\nconst TaskBarChat = ({ data }: IProps) => {\n  return Object.entries(data).map(([key, val]) => {\n    const data = val.map((x) => ({\n      ...x,\n      now: dayjs(x.now).valueOf(),\n    }));\n    const firstItem = data[0];\n    const lastItem = data[data.length - 1];\n\n    const domain = [firstItem?.now, lastItem?.now];\n    return (\n      <Flex key={key} className={styles.taskBar} vertical>\n        <div className=\"flex gap-8\">\n          <b className={styles.taskBarTitle}>ID: {key}</b>\n          <b className={styles.taskBarTitle}>Lag: {lastItem?.lag}</b>\n          <b className={styles.taskBarTitle}>Pending: {lastItem?.pending}</b>\n        </div>\n        <ResponsiveContainer>\n          <BarChart data={data}>\n            <XAxis\n              dataKey=\"now\"\n              type=\"number\"\n              scale={'time'}\n              domain={domain}\n              tickFormatter={(x) => formatTime(x)}\n              allowDataOverflow\n              angle={60}\n              padding={{ left: 20, right: 20 }}\n              tickMargin={20}\n            />\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <Tooltip\n              wrapperStyle={{ pointerEvents: 'auto' }}\n              content={<CustomTooltip></CustomTooltip>}\n              trigger=\"click\"\n            />\n            <Legend wrapperStyle={{ bottom: -22 }} />\n            <Bar\n              dataKey=\"done\"\n              fill=\"#2fe235\"\n              activeBar={<Rectangle fill=\"pink\" stroke=\"blue\" />}\n            />\n            <Bar\n              dataKey=\"failed\"\n              fill=\"#ef3b74\"\n              activeBar={<Rectangle fill=\"gold\" stroke=\"purple\" />}\n            />\n          </BarChart>\n        </ResponsiveContainer>\n        <Divider></Divider>\n      </Flex>\n    );\n  });\n};\n\nexport default TaskBarChat;\n","import SvgIcon from '@/components/svg-icon';\nimport { useFetchSystemStatus } from '@/hooks/user-setting-hooks';\nimport {\n  ISystemStatus,\n  TaskExecutorHeartbeatItem,\n} from '@/interfaces/database/user-setting';\nimport { Badge, Card, Flex, Spin, Typography } from 'antd';\nimport classNames from 'classnames';\nimport lowerCase from 'lodash/lowerCase';\nimport upperFirst from 'lodash/upperFirst';\nimport { useEffect } from 'react';\n\nimport { toFixed } from '@/utils/common-util';\nimport { isObject } from 'lodash';\nimport styles from './index.less';\nimport TaskBarChat from './task-bar-chat';\n\nconst { Text } = Typography;\n\nenum Status {\n  'green' = 'success',\n  'red' = 'error',\n  'yellow' = 'warning',\n}\n\nconst TitleMap = {\n  doc_engine: 'Doc Engine',\n  storage: 'Object Storage',\n  redis: 'Redis',\n  database: 'Database',\n  task_executor_heartbeats: 'Task Executor',\n};\n\nconst IconMap = {\n  es: 'es',\n  doc_engine: 'storage',\n  redis: 'redis',\n  storage: 'minio',\n  database: 'database',\n};\n\nconst SystemInfo = () => {\n  const {\n    systemStatus,\n    fetchSystemStatus,\n    loading: statusLoading,\n  } = useFetchSystemStatus();\n\n  useEffect(() => {\n    fetchSystemStatus();\n  }, [fetchSystemStatus]);\n\n  return (\n    <section className={styles.systemInfo}>\n      <Spin spinning={statusLoading}>\n        <Flex gap={16} vertical>\n          {Object.keys(systemStatus).map((key) => {\n            const info = systemStatus[key as keyof ISystemStatus];\n\n            return (\n              <Card\n                type=\"inner\"\n                title={\n                  <Flex align=\"center\" gap={10}>\n                    {key === 'task_executor_heartbeats' ? (\n                      <img src=\"/ke_logo_new.png\" alt=\"\" width={26} />\n                    ) : (\n                      <SvgIcon\n                        name={IconMap[key as keyof typeof IconMap]}\n                        width={26}\n                      ></SvgIcon>\n                    )}\n                    <span className={styles.title}>\n                      {TitleMap[key as keyof typeof TitleMap]}\n                    </span>\n                    <Badge\n                      className={styles.badge}\n                      status={Status[info.status as keyof typeof Status]}\n                    />\n                  </Flex>\n                }\n                key={key}\n              >\n                {key === 'task_executor_heartbeats' ? (\n                  isObject(info) ? (\n                    <TaskBarChat\n                      data={info as Record<string, TaskExecutorHeartbeatItem[]>}\n                    ></TaskBarChat>\n                  ) : (\n                    <Text className={styles.error}>\n                      {typeof info.error === 'string' ? info.error : ''}\n                    </Text>\n                  )\n                ) : (\n                  Object.keys(info)\n                    .filter((x) => x !== 'status')\n                    .map((x) => {\n                      return (\n                        <Flex\n                          key={x}\n                          align=\"center\"\n                          gap={16}\n                          className={styles.text}\n                        >\n                          <b>{upperFirst(lowerCase(x))}:</b>\n                          <Text\n                            className={classNames({\n                              [styles.error]: x === 'error',\n                            })}\n                          >\n                            {toFixed((info as Record<string, any>)[x]) as any}\n                            {x === 'elapsed' && ' ms'}\n                          </Text>\n                        </Flex>\n                      );\n                    })\n                )}\n              </Card>\n            );\n          })}\n        </Flex>\n      </Spin>\n    </section>\n  );\n};\n\nexport default SystemInfo;\n","import dayjs from 'dayjs';\n\nexport function formatDate(date: any) {\n  if (!date) {\n    return '';\n  }\n  return dayjs(date).format('DD/MM/YYYY HH:mm:ss');\n}\n\nexport function formatTime(date: any) {\n  if (!date) {\n    return '';\n  }\n  return dayjs(date).format('HH:mm:ss');\n}\n\nexport function today() {\n  return formatDate(dayjs());\n}\n\nexport function lastDay() {\n  return formatDate(dayjs().subtract(1, 'days'));\n}\n\nexport function lastWeek() {\n  return formatDate(dayjs().subtract(1, 'weeks'));\n}\n"],"names":["CustomTooltip","_ref","active","payload","restProps","_objectWithoutProperties","_excluded","length","taskExecutorHeartbeatItem","get","_jsx","className","children","_jsxs","formatDate","label","JsonView","src","displaySize","_ref2","data","Object","entries","map","_ref3","_ref4","_slicedToArray","key","x","_objectSpread","now","dayjs","valueOf","firstItem","lastItem","domain","Flex","styles","vertical","lag","pending","ResponsiveContainer","BarChart","XAxis","dataKey","type","scale","tickFormatter","formatTime","allowDataOverflow","angle","padding","left","right","tickMargin","CartesianGrid","strokeDasharray","Tooltip","wrapperStyle","pointerEvents","content","trigger","Legend","bottom","Bar","fill","activeBar","Rectangle","stroke","Divider","Text","Typography","Status","TitleMap","doc_engine","storage","redis","database","task_executor_heartbeats","IconMap","es","_useFetchSystemStatus","useFetchSystemStatus","systemStatus","fetchSystemStatus","statusLoading","loading","useEffect","Spin","spinning","gap","keys","info","Card","title","align","alt","width","SvgIcon","name","Badge","status","isObject","TaskBarChat","error","filter","upperFirst","lowerCase","classNames","_defineProperty","toFixed","date","format"],"sourceRoot":""}