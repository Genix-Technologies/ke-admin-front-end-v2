{"version":3,"file":"5040.a33e155f.async.js","mappings":"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","sources":["webpack:///./src/hooks/chat-hooks.ts","webpack:///./src/pages/chat/hooks.ts","webpack:///./src/pages/chat/shared-hooks.ts","webpack:///./src/utils/index.ts"],"sourcesContent":["import { ChatSearchParams } from '@/constants/chat';\nimport {\n  IConversation,\n  IDialog,\n  IStats,\n  IToken,\n} from '@/interfaces/database/chat';\nimport {\n  IAskRequestBody,\n  IFeedbackRequestBody,\n} from '@/interfaces/request/chat';\nimport i18n from '@/locales/config';\nimport { IClientConversation } from '@/pages/chat/interface';\nimport { useGetSharedChatSearchParams } from '@/pages/chat/shared-hooks';\nimport chatService from '@/services/chat-service';\nimport {\n  buildMessageListWithUuid,\n  getConversationId,\n  isConversationIdExist,\n} from '@/utils/chat';\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { message } from 'antd';\nimport dayjs, { Dayjs } from 'dayjs';\nimport { has, set } from 'lodash';\nimport { useCallback, useMemo, useState } from 'react';\nimport { history, useSearchParams } from 'umi';\n\n//#region logic\n\nexport const useClickDialogCard = () => {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const [_, setSearchParams] = useSearchParams();\n\n  const newQueryParameters: URLSearchParams = useMemo(() => {\n    return new URLSearchParams();\n  }, []);\n\n  const handleClickDialog = useCallback(\n    (dialogId: string) => {\n      newQueryParameters.set(ChatSearchParams.DialogId, dialogId);\n      // newQueryParameters.set(\n      //   ChatSearchParams.ConversationId,\n      //   EmptyConversationId,\n      // );\n      setSearchParams(newQueryParameters);\n    },\n    [newQueryParameters, setSearchParams],\n  );\n\n  return { handleClickDialog };\n};\n\nexport const useClickConversationCard = () => {\n  const [currentQueryParameters, setSearchParams] = useSearchParams();\n  const newQueryParameters: URLSearchParams = useMemo(\n    () => new URLSearchParams(currentQueryParameters.toString()),\n    [currentQueryParameters],\n  );\n\n  const handleClickConversation = useCallback(\n    (conversationId: string, isNew: string) => {\n      newQueryParameters.set(ChatSearchParams.ConversationId, conversationId);\n      newQueryParameters.set(ChatSearchParams.isNew, isNew);\n      setSearchParams(newQueryParameters);\n    },\n    [setSearchParams, newQueryParameters],\n  );\n\n  return { handleClickConversation };\n};\n\nexport const useGetChatSearchParams = () => {\n  const [currentQueryParameters] = useSearchParams();\n\n  return {\n    dialogId: currentQueryParameters.get(ChatSearchParams.DialogId) || '',\n    conversationId:\n      currentQueryParameters.get(ChatSearchParams.ConversationId) || '',\n    isNew: currentQueryParameters.get(ChatSearchParams.isNew) || '',\n  };\n};\n\n//#endregion\n\n//#region dialog\n\nexport const useFetchNextDialogList = () => {\n  const { handleClickDialog } = useClickDialogCard();\n  const { dialogId } = useGetChatSearchParams();\n\n  const {\n    data,\n    isFetching: loading,\n    refetch,\n  } = useQuery<IDialog[]>({\n    queryKey: ['fetchDialogList'],\n    initialData: [],\n    gcTime: 0,\n    refetchOnWindowFocus: false,\n    queryFn: async (...params) => {\n      console.log('🚀 ~ queryFn: ~ params:', params);\n      const { data } = await chatService.listDialog();\n\n      if (data.code === 0) {\n        const list: IDialog[] = data.data;\n        if (list.length > 0) {\n          if (list.every((x) => x.id !== dialogId)) {\n            handleClickDialog(data.data[0].id);\n          }\n        } else {\n          history.push('/chat');\n        }\n      }\n\n      return data?.data ?? [];\n    },\n  });\n\n  return { data, loading, refetch };\n};\n\nexport const useSetNextDialog = () => {\n  const queryClient = useQueryClient();\n\n  const {\n    data,\n    isPending: loading,\n    mutateAsync,\n  } = useMutation({\n    mutationKey: ['setDialog'],\n    mutationFn: async (params: IDialog) => {\n      const { data } = await chatService.setDialog(params);\n      if (data.code === 0) {\n        queryClient.invalidateQueries({\n          exact: false,\n          queryKey: ['fetchDialogList'],\n        });\n\n        queryClient.invalidateQueries({\n          queryKey: ['fetchDialog'],\n        });\n        message.success(\n          i18n.t(`message.${params.dialog_id ? 'modified' : 'created'}`),\n        );\n      }\n      return data?.code;\n    },\n  });\n\n  return { data, loading, setDialog: mutateAsync };\n};\n\nexport const useFetchNextDialog = () => {\n  const { dialogId } = useGetChatSearchParams();\n\n  const {\n    data,\n    isFetching: loading,\n    refetch,\n  } = useQuery<IDialog>({\n    queryKey: ['fetchDialog', dialogId],\n    gcTime: 0,\n    initialData: {} as IDialog,\n    enabled: !!dialogId,\n    refetchOnWindowFocus: false,\n    queryFn: async () => {\n      const { data } = await chatService.getDialog({ dialogId });\n\n      return data?.data ?? ({} as IDialog);\n    },\n  });\n\n  return { data, loading, refetch };\n};\n\nexport const useFetchManualDialog = () => {\n  const {\n    data,\n    isPending: loading,\n    mutateAsync,\n  } = useMutation({\n    mutationKey: ['fetchManualDialog'],\n    gcTime: 0,\n    mutationFn: async (dialogId: string) => {\n      const { data } = await chatService.getDialog({ dialogId });\n\n      return data;\n    },\n  });\n\n  return { data, loading, fetchDialog: mutateAsync };\n};\n\nexport const useRemoveNextDialog = () => {\n  const queryClient = useQueryClient();\n\n  const {\n    data,\n    isPending: loading,\n    mutateAsync,\n  } = useMutation({\n    mutationKey: ['removeDialog'],\n    mutationFn: async (dialogIds: string[]) => {\n      const { data } = await chatService.removeDialog({ dialogIds });\n      if (data.code === 0) {\n        queryClient.invalidateQueries({ queryKey: ['fetchDialogList'] });\n\n        message.success(i18n.t('message.deleted'));\n      }\n      return data.code;\n    },\n  });\n\n  return { data, loading, removeDialog: mutateAsync };\n};\n\n//#endregion\n\n//#region conversation\n\nexport const useFetchNextConversationList = () => {\n  const { dialogId } = useGetChatSearchParams();\n  const { handleClickConversation } = useClickConversationCard();\n  const {\n    data,\n    isFetching: loading,\n    refetch,\n  } = useQuery<IConversation[]>({\n    queryKey: ['fetchConversationList', dialogId],\n    initialData: [],\n    gcTime: 0,\n    refetchOnWindowFocus: false,\n    enabled: !!dialogId,\n    queryFn: async () => {\n      const { data } = await chatService.listConversation({ dialogId });\n      if (data.code === 0 && data.data.length > 0) {\n        handleClickConversation(data.data[0].id, '');\n      }\n      return data?.data;\n    },\n  });\n\n  return { data, loading, refetch };\n};\n\nexport const useFetchNextConversation = () => {\n  const { isNew, conversationId } = useGetChatSearchParams();\n  const { sharedId } = useGetSharedChatSearchParams();\n  const {\n    data,\n    isFetching: loading,\n    refetch,\n  } = useQuery<IClientConversation>({\n    queryKey: ['fetchConversation', conversationId],\n    initialData: {} as IClientConversation,\n    // enabled: isConversationIdExist(conversationId),\n    gcTime: 0,\n    refetchOnWindowFocus: false,\n    queryFn: async () => {\n      if (\n        isNew !== 'true' &&\n        isConversationIdExist(sharedId || conversationId)\n      ) {\n        const { data } = await chatService.getConversation({\n          conversationId: conversationId || sharedId,\n        });\n\n        const conversation = data?.data ?? {};\n\n        const messageList = buildMessageListWithUuid(conversation?.message);\n\n        return { ...conversation, message: messageList };\n      }\n      return { message: [] };\n    },\n  });\n\n  return { data, loading, refetch };\n};\n\nexport const useFetchNextConversationSSE = () => {\n  const { isNew } = useGetChatSearchParams();\n  const { sharedId } = useGetSharedChatSearchParams();\n  const {\n    data,\n    isFetching: loading,\n    refetch,\n  } = useQuery<IClientConversation>({\n    queryKey: ['fetchConversationSSE', sharedId],\n    initialData: {} as IClientConversation,\n    gcTime: 0,\n    refetchOnWindowFocus: false,\n    queryFn: async () => {\n      if (isNew !== 'true' && isConversationIdExist(sharedId || '')) {\n        if (!sharedId) return {};\n        const { data } = await chatService.getConversationSSE({}, sharedId);\n        const conversation = data?.data ?? {};\n        const messageList = buildMessageListWithUuid(conversation?.message);\n        return { ...conversation, message: messageList };\n      }\n      return { message: [] };\n    },\n  });\n\n  return { data, loading, refetch };\n};\n\nexport const useFetchManualConversation = () => {\n  const {\n    data,\n    isPending: loading,\n    mutateAsync,\n  } = useMutation({\n    mutationKey: ['fetchManualConversation'],\n    gcTime: 0,\n    mutationFn: async (conversationId: string) => {\n      const { data } = await chatService.getConversation({ conversationId });\n\n      return data;\n    },\n  });\n\n  return { data, loading, fetchConversation: mutateAsync };\n};\n\nexport const useUpdateNextConversation = () => {\n  const queryClient = useQueryClient();\n  const {\n    data,\n    isPending: loading,\n    mutateAsync,\n  } = useMutation({\n    mutationKey: ['updateConversation'],\n    mutationFn: async (params: Record<string, any>) => {\n      const { data } = await chatService.setConversation({\n        ...params,\n        conversation_id: params.conversation_id\n          ? params.conversation_id\n          : getConversationId(),\n      });\n      if (data.code === 0) {\n        queryClient.invalidateQueries({ queryKey: ['fetchConversationList'] });\n        message.success(i18n.t(`message.modified`));\n      }\n      return data;\n    },\n  });\n\n  return { data, loading, updateConversation: mutateAsync };\n};\n\nexport const useRemoveNextConversation = () => {\n  const queryClient = useQueryClient();\n  const { dialogId } = useGetChatSearchParams();\n\n  const {\n    data,\n    isPending: loading,\n    mutateAsync,\n  } = useMutation({\n    mutationKey: ['removeConversation'],\n    mutationFn: async (conversationIds: string[]) => {\n      const { data } = await chatService.removeConversation({\n        conversationIds,\n        dialogId,\n      });\n      if (data.code === 0) {\n        queryClient.invalidateQueries({ queryKey: ['fetchConversationList'] });\n      }\n      return data.code;\n    },\n  });\n\n  return { data, loading, removeConversation: mutateAsync };\n};\n\nexport const useDeleteMessage = () => {\n  const { conversationId } = useGetChatSearchParams();\n\n  const {\n    data,\n    isPending: loading,\n    mutateAsync,\n  } = useMutation({\n    mutationKey: ['deleteMessage'],\n    mutationFn: async (messageId: string) => {\n      const { data } = await chatService.deleteMessage({\n        messageId,\n        conversationId,\n      });\n\n      if (data.code === 0) {\n        message.success(i18n.t(`message.deleted`));\n      }\n\n      return data.code;\n    },\n  });\n\n  return { data, loading, deleteMessage: mutateAsync };\n};\n\nexport const useFeedback = () => {\n  const { conversationId } = useGetChatSearchParams();\n\n  const {\n    data,\n    isPending: loading,\n    mutateAsync,\n  } = useMutation({\n    mutationKey: ['feedback'],\n    mutationFn: async (params: IFeedbackRequestBody) => {\n      const { data } = await chatService.thumbup({\n        ...params,\n        conversationId,\n      });\n      if (data.code === 0) {\n        message.success(i18n.t(`message.operated`));\n      }\n      return data.code;\n    },\n  });\n\n  return { data, loading, feedback: mutateAsync };\n};\n\n//#endregion\n\n// #region API provided for external calls\n\nexport const useCreateNextToken = () => {\n  const queryClient = useQueryClient();\n  const {\n    data,\n    isPending: loading,\n    mutateAsync,\n  } = useMutation({\n    mutationKey: ['createToken'],\n    mutationFn: async (params: Record<string, any>) => {\n      const { data } = await chatService.createToken(params);\n      if (data.code === 0) {\n        queryClient.invalidateQueries({ queryKey: ['fetchTokenList'] });\n      }\n      return data?.data ?? [];\n    },\n  });\n\n  return { data, loading, createToken: mutateAsync };\n};\n\nexport const useFetchTokenList = (params: Record<string, any>) => {\n  const {\n    data,\n    isFetching: loading,\n    refetch,\n  } = useQuery<IToken[]>({\n    queryKey: ['fetchTokenList', params],\n    initialData: [],\n    gcTime: 0,\n    queryFn: async () => {\n      const { data } = await chatService.listToken(params);\n\n      return data?.data ?? [];\n    },\n  });\n\n  return { data, loading, refetch };\n};\n\nexport const useRemoveNextToken = () => {\n  const queryClient = useQueryClient();\n  const {\n    data,\n    isPending: loading,\n    mutateAsync,\n  } = useMutation({\n    mutationKey: ['removeToken'],\n    mutationFn: async (params: {\n      tenantId: string;\n      dialogId?: string;\n      tokens: string[];\n    }) => {\n      const { data } = await chatService.removeToken(params);\n      if (data.code === 0) {\n        queryClient.invalidateQueries({ queryKey: ['fetchTokenList'] });\n      }\n      return data?.data ?? [];\n    },\n  });\n\n  return { data, loading, removeToken: mutateAsync };\n};\n\ntype RangeValue = [Dayjs | null, Dayjs | null] | null;\n\nconst getDay = (date?: Dayjs) => date?.format('YYYY-MM-DD');\n\nexport const useFetchNextStats = () => {\n  const [pickerValue, setPickerValue] = useState<RangeValue>([\n    dayjs().subtract(7, 'day'),\n    dayjs(),\n  ]);\n  const { data, isFetching: loading } = useQuery<IStats>({\n    queryKey: ['fetchStats', pickerValue],\n    initialData: {} as IStats,\n    gcTime: 0,\n    queryFn: async () => {\n      if (Array.isArray(pickerValue) && pickerValue[0]) {\n        const { data } = await chatService.getStats({\n          fromDate: getDay(pickerValue[0]),\n          toDate: getDay(pickerValue[1] ?? dayjs()),\n        });\n        return data?.data ?? {};\n      }\n      return {};\n    },\n  });\n\n  return { data, loading, pickerValue, setPickerValue };\n};\n\n//#endregion\n\n//#region shared chat\n\nexport const useCreateNextSharedConversation = () => {\n  const {\n    data,\n    isPending: loading,\n    mutateAsync,\n  } = useMutation({\n    mutationKey: ['createSharedConversation'],\n    mutationFn: async (userId?: string) => {\n      const { data } = await chatService.createExternalConversation({ userId });\n\n      return data;\n    },\n  });\n\n  return { data, loading, createSharedConversation: mutateAsync };\n};\n\n// deprecated\nexport const useFetchNextSharedConversation = (\n  conversationId?: string | null,\n) => {\n  const { data, isPending: loading } = useQuery({\n    queryKey: ['fetchSharedConversation'],\n    enabled: !!conversationId,\n    queryFn: async () => {\n      if (!conversationId) {\n        return {};\n      }\n      const { data } = await chatService.getExternalConversation(\n        null,\n        conversationId,\n      );\n\n      const messageList = buildMessageListWithUuid(data?.data?.message);\n\n      set(data, 'data.message', messageList);\n\n      return data;\n    },\n  });\n\n  return { data, loading };\n};\n\n//#endregion\n\n//#region search page\n\nexport const useFetchMindMap = () => {\n  const {\n    data,\n    isPending: loading,\n    mutateAsync,\n  } = useMutation({\n    mutationKey: ['fetchMindMap'],\n    gcTime: 0,\n    mutationFn: async (params: IAskRequestBody) => {\n      try {\n        const ret = await chatService.getMindMap(params);\n        return ret?.data?.data ?? {};\n      } catch (error: any) {\n        if (has(error, 'message')) {\n          message.error(error.message);\n        }\n\n        return [];\n      }\n    },\n  });\n\n  return { data, loading, fetchMindMap: mutateAsync };\n};\n\nexport const useFetchRelatedQuestions = () => {\n  const {\n    data,\n    isPending: loading,\n    mutateAsync,\n  } = useMutation({\n    mutationKey: ['fetchRelatedQuestions'],\n    gcTime: 0,\n    mutationFn: async (question: string): Promise<string[]> => {\n      const { data } = await chatService.getRelatedQuestions({ question });\n\n      return data?.data ?? [];\n    },\n  });\n\n  return { data, loading, fetchRelatedQuestions: mutateAsync };\n};\n//#endregion\n","import { ChatSearchParams, MessageType } from '@/constants/chat';\nimport { fileIconMap } from '@/constants/common';\nimport {\n  useFetchManualConversation,\n  useFetchManualDialog,\n  useFetchNextConversation,\n  useFetchNextConversationList,\n  useFetchNextDialog,\n  useGetChatSearchParams,\n  useRemoveNextConversation,\n  useRemoveNextDialog,\n  useSetNextDialog,\n  useUpdateNextConversation,\n} from '@/hooks/chat-hooks';\nimport {\n  useSetModalState,\n  useShowDeleteConfirm,\n  useTranslate,\n} from '@/hooks/common-hooks';\nimport {\n  useRegenerateMessage,\n  useSelectDerivedMessages,\n  useSendMessageWithSse,\n} from '@/hooks/logic-hooks';\nimport { IConversation, IDialog, Message } from '@/interfaces/database/chat';\nimport { getFileExtension } from '@/utils';\nimport api from '@/utils/api';\nimport { getConversationId } from '@/utils/chat';\nimport { useMutationState } from '@tanstack/react-query';\nimport { get } from 'lodash';\nimport trim from 'lodash/trim';\nimport {\n  ChangeEventHandler,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport { useSearchParams } from 'umi';\nimport { v4 as uuid } from 'uuid';\nimport {\n  IClientConversation,\n  IMessage,\n  VariableTableDataType,\n} from './interface';\n\nexport const useSetChatRouteParams = () => {\n  const [currentQueryParameters, setSearchParams] = useSearchParams();\n  const newQueryParameters: URLSearchParams = useMemo(\n    () => new URLSearchParams(currentQueryParameters.toString()),\n    [currentQueryParameters],\n  );\n\n  const setConversationIsNew = useCallback(\n    (value: string) => {\n      newQueryParameters.set(ChatSearchParams.isNew, value);\n      setSearchParams(newQueryParameters);\n    },\n    [newQueryParameters, setSearchParams],\n  );\n\n  const getConversationIsNew = useCallback(() => {\n    return newQueryParameters.get(ChatSearchParams.isNew);\n  }, [newQueryParameters]);\n\n  return { setConversationIsNew, getConversationIsNew };\n};\n\nexport const useSetNewConversationRouteParams = () => {\n  const [currentQueryParameters, setSearchParams] = useSearchParams();\n  const newQueryParameters: URLSearchParams = useMemo(\n    () => new URLSearchParams(currentQueryParameters.toString()),\n    [currentQueryParameters],\n  );\n\n  const setNewConversationRouteParams = useCallback(\n    (conversationId: string, isNew: string) => {\n      newQueryParameters.set(ChatSearchParams.ConversationId, conversationId);\n      newQueryParameters.set(ChatSearchParams.isNew, isNew);\n      setSearchParams(newQueryParameters);\n    },\n    [newQueryParameters, setSearchParams],\n  );\n\n  return { setNewConversationRouteParams };\n};\n\nexport const useSelectCurrentDialog = () => {\n  const data = useMutationState({\n    filters: { mutationKey: ['fetchDialog'] },\n    select: (mutation) => {\n      return get(mutation, 'state.data.data', {});\n    },\n  });\n\n  return (data.at(-1) ?? {}) as IDialog;\n};\n\nexport const useSelectPromptConfigParameters = (): VariableTableDataType[] => {\n  const { data: currentDialog } = useFetchNextDialog();\n\n  const finalParameters: VariableTableDataType[] = useMemo(() => {\n    const parameters = currentDialog?.prompt_config?.parameters ?? [];\n    if (!currentDialog.id) {\n      // The newly created chat has a default parameter\n      return [{ key: uuid(), variable: 'knowledge', optional: false }];\n    }\n    return parameters.map((x) => ({\n      key: uuid(),\n      variable: x.key,\n      optional: x.optional,\n    }));\n  }, [currentDialog]);\n\n  return finalParameters;\n};\n\nexport const useDeleteDialog = () => {\n  const showDeleteConfirm = useShowDeleteConfirm();\n\n  const { removeDialog } = useRemoveNextDialog();\n\n  const onRemoveDialog = (dialogIds: Array<string>) => {\n    showDeleteConfirm({ onOk: () => removeDialog(dialogIds) });\n  };\n\n  return { onRemoveDialog };\n};\n\nexport const useHandleItemHover = () => {\n  const [activated, setActivated] = useState<string>('');\n\n  const handleItemEnter = (id: string) => {\n    setActivated(id);\n  };\n\n  const handleItemLeave = () => {\n    setActivated('');\n  };\n\n  return {\n    activated,\n    handleItemEnter,\n    handleItemLeave,\n  };\n};\n\nexport const useEditDialog = () => {\n  const [dialog, setDialog] = useState<IDialog>({} as IDialog);\n  const { fetchDialog } = useFetchManualDialog();\n  const { setDialog: submitDialog, loading } = useSetNextDialog();\n\n  const {\n    visible: dialogEditVisible,\n    hideModal: hideDialogEditModal,\n    showModal: showDialogEditModal,\n  } = useSetModalState();\n\n  const hideModal = useCallback(() => {\n    setDialog({} as IDialog);\n    hideDialogEditModal();\n  }, [hideDialogEditModal]);\n\n  const onDialogEditOk = useCallback(\n    async (dialog: IDialog) => {\n      const ret = await submitDialog(dialog);\n\n      if (ret === 0) {\n        hideModal();\n      }\n    },\n    [submitDialog, hideModal],\n  );\n\n  const handleShowDialogEditModal = useCallback(\n    async (dialogId?: string) => {\n      if (dialogId) {\n        const ret = await fetchDialog(dialogId);\n        if (ret.code === 0) {\n          setDialog(ret.data);\n        }\n      }\n      showDialogEditModal();\n    },\n    [showDialogEditModal, fetchDialog],\n  );\n\n  const clearDialog = useCallback(() => {\n    setDialog({} as IDialog);\n  }, []);\n\n  return {\n    dialogSettingLoading: loading,\n    initialDialog: dialog,\n    onDialogEditOk,\n    dialogEditVisible,\n    hideDialogEditModal: hideModal,\n    showDialogEditModal: handleShowDialogEditModal,\n    clearDialog,\n  };\n};\n\n//#region conversation\n\nexport const useSelectDerivedConversationList = () => {\n  const { t } = useTranslate('chat');\n\n  const [list, setList] = useState<Array<IConversation>>([]);\n  const { data: currentDialog } = useFetchNextDialog();\n  const { data: conversationList, loading } = useFetchNextConversationList();\n  const { dialogId } = useGetChatSearchParams();\n  const prologue = currentDialog?.prompt_config?.prologue ?? '';\n  const { setNewConversationRouteParams } = useSetNewConversationRouteParams();\n\n  const addTemporaryConversation = useCallback(() => {\n    const conversationId = getConversationId();\n    setList((pre) => {\n      if (dialogId) {\n        setNewConversationRouteParams(conversationId, 'true');\n        const nextList = [\n          {\n            id: conversationId,\n            name: t('newConversation'),\n            dialog_id: dialogId,\n            is_new: true,\n            message: [\n              {\n                content: prologue,\n                role: MessageType.Assistant,\n              },\n            ],\n          } as any,\n          ...conversationList,\n        ];\n        return nextList;\n      }\n\n      return pre;\n    });\n  }, [conversationList, dialogId, prologue, t, setNewConversationRouteParams]);\n\n  // When you first enter the page, select the top conversation card\n\n  useEffect(() => {\n    setList([...conversationList]);\n  }, [conversationList]);\n\n  return { list, addTemporaryConversation, loading };\n};\n\nexport const useSetConversation = () => {\n  const { dialogId } = useGetChatSearchParams();\n  const { updateConversation } = useUpdateNextConversation();\n\n  const setConversation = useCallback(\n    async (\n      message: string,\n      isNew: boolean = false,\n      conversationId?: string,\n    ) => {\n      const data = await updateConversation({\n        dialog_id: dialogId,\n        name: message,\n        is_new: isNew,\n        conversation_id: conversationId,\n        message: [\n          {\n            role: MessageType.Assistant,\n            content: message,\n          },\n        ],\n      });\n\n      return data;\n    },\n    [updateConversation, dialogId],\n  );\n\n  return { setConversation };\n};\n\nexport const useSelectNextMessages = () => {\n  const {\n    ref,\n    setDerivedMessages,\n    derivedMessages,\n    addNewestAnswer,\n    addNewestQuestion,\n    removeLatestMessage,\n    removeMessageById,\n    removeMessagesAfterCurrentMessage,\n  } = useSelectDerivedMessages();\n  const { data: conversation, loading } = useFetchNextConversation();\n  const { data: dialog } = useFetchNextDialog();\n  const { conversationId, dialogId, isNew } = useGetChatSearchParams();\n\n  const addPrologue = useCallback(() => {\n    if (dialogId !== '' && isNew === 'true') {\n      const prologue = dialog.prompt_config?.prologue;\n\n      const nextMessage = {\n        role: MessageType.Assistant,\n        content: prologue,\n        id: uuid(),\n      } as IMessage;\n\n      setDerivedMessages([nextMessage]);\n    }\n  }, [isNew, dialog, dialogId, setDerivedMessages]);\n\n  useEffect(() => {\n    addPrologue();\n  }, [addPrologue]);\n\n  useEffect(() => {\n    if (\n      conversationId &&\n      isNew !== 'true' &&\n      conversation.message?.length > 0\n    ) {\n      setDerivedMessages(conversation.message);\n    }\n\n    if (!conversationId) {\n      setDerivedMessages([]);\n    }\n  }, [conversation.message, conversationId, setDerivedMessages, isNew]);\n\n  return {\n    ref,\n    derivedMessages,\n    loading,\n    addNewestAnswer,\n    addNewestQuestion,\n    removeLatestMessage,\n    removeMessageById,\n    removeMessagesAfterCurrentMessage,\n  };\n};\n\nexport const useHandleMessageInputChange = () => {\n  const [value, setValue] = useState('');\n\n  const handleInputChange: ChangeEventHandler<HTMLInputElement> = (e) => {\n    const value = e.target.value;\n    const nextValue = value.replaceAll('\\\\n', '\\n').replaceAll('\\\\t', '\\t');\n    setValue(nextValue);\n  };\n\n  return {\n    handleInputChange,\n    value,\n    setValue,\n  };\n};\n\nexport const useSendNextMessage = (controller: AbortController) => {\n  const { setConversation } = useSetConversation();\n  const { conversationId, isNew } = useGetChatSearchParams();\n  const { handleInputChange, value, setValue } = useHandleMessageInputChange();\n\n  const { send, answer, done } = useSendMessageWithSse(\n    api.completeConversation,\n  );\n  const {\n    ref,\n    derivedMessages,\n    loading,\n    addNewestAnswer,\n    addNewestQuestion,\n    removeLatestMessage,\n    removeMessageById,\n    removeMessagesAfterCurrentMessage,\n  } = useSelectNextMessages();\n  const { setConversationIsNew, getConversationIsNew } =\n    useSetChatRouteParams();\n\n  const sendMessage = useCallback(\n    async ({\n      message,\n      currentConversationId,\n      messages,\n    }: {\n      message: Message;\n      currentConversationId?: string;\n      messages?: Message[];\n    }) => {\n      const res = await send(\n        {\n          conversation_id: currentConversationId ?? conversationId,\n          messages: [...(messages ?? derivedMessages ?? []), message],\n        },\n        controller,\n      );\n\n      if (res && (res?.response.status !== 200 || res?.data?.code !== 0)) {\n        // cancel loading\n        setValue(message.content);\n        console.info('removeLatestMessage111');\n        removeLatestMessage();\n      }\n    },\n    [\n      derivedMessages,\n      conversationId,\n      removeLatestMessage,\n      setValue,\n      send,\n      controller,\n    ],\n  );\n\n  const handleSendMessage = useCallback(\n    async (message: Message) => {\n      const isNew = getConversationIsNew();\n      if (isNew !== 'true') {\n        sendMessage({ message });\n      } else {\n        const data = await setConversation(\n          message.content,\n          true,\n          conversationId,\n        );\n        if (data.code === 0) {\n          setConversationIsNew('');\n          const id = data.data.id;\n          // currentConversationIdRef.current = id;\n          sendMessage({\n            message,\n            currentConversationId: id,\n            messages: data.data.message,\n          });\n        }\n      }\n    },\n    [\n      setConversation,\n      sendMessage,\n      setConversationIsNew,\n      getConversationIsNew,\n      conversationId,\n    ],\n  );\n\n  const { regenerateMessage } = useRegenerateMessage({\n    removeMessagesAfterCurrentMessage,\n    sendMessage,\n    messages: derivedMessages,\n  });\n\n  useEffect(() => {\n    //  #1289\n    if (answer.answer && conversationId && isNew !== 'true') {\n      addNewestAnswer(answer);\n    }\n  }, [answer, addNewestAnswer, conversationId, isNew]);\n\n  const handlePressEnter = useCallback(\n    (documentIds: string[]) => {\n      if (trim(value) === '') return;\n      const id = uuid();\n\n      addNewestQuestion({\n        content: value,\n        doc_ids: documentIds,\n        id,\n        role: MessageType.User,\n      });\n      if (done) {\n        setValue('');\n        handleSendMessage({\n          id,\n          content: value.trim(),\n          role: MessageType.User,\n          doc_ids: documentIds,\n        });\n      }\n    },\n    [addNewestQuestion, handleSendMessage, done, setValue, value],\n  );\n\n  return {\n    handlePressEnter,\n    handleInputChange,\n    value,\n    setValue,\n    regenerateMessage,\n    sendLoading: !done,\n    loading,\n    ref,\n    derivedMessages,\n    removeMessageById,\n  };\n};\n\nexport const useGetFileIcon = () => {\n  const getFileIcon = (filename: string) => {\n    const ext: string = getFileExtension(filename);\n    const iconPath = fileIconMap[ext as keyof typeof fileIconMap];\n    return `@/assets/svg/file-icon/${iconPath}`;\n  };\n\n  return getFileIcon;\n};\n\nexport const useDeleteConversation = () => {\n  const showDeleteConfirm = useShowDeleteConfirm();\n  const { removeConversation } = useRemoveNextConversation();\n\n  const deleteConversation = (conversationIds: Array<string>) => async () => {\n    const ret = await removeConversation(conversationIds);\n\n    return ret;\n  };\n\n  const onRemoveConversation = (conversationIds: Array<string>) => {\n    showDeleteConfirm({ onOk: deleteConversation(conversationIds) });\n  };\n\n  return { onRemoveConversation };\n};\n\nexport const useRenameConversation = () => {\n  const [conversation, setConversation] = useState<IClientConversation>(\n    {} as IClientConversation,\n  );\n  const { fetchConversation } = useFetchManualConversation();\n  const {\n    visible: conversationRenameVisible,\n    hideModal: hideConversationRenameModal,\n    showModal: showConversationRenameModal,\n  } = useSetModalState();\n  const { updateConversation, loading } = useUpdateNextConversation();\n\n  const onConversationRenameOk = useCallback(\n    async (name: string) => {\n      const ret = await updateConversation({\n        conversation_id: conversation.id,\n        name,\n        is_new: false,\n      });\n\n      if (ret.code === 0) {\n        hideConversationRenameModal();\n      }\n    },\n    [updateConversation, conversation, hideConversationRenameModal],\n  );\n\n  const handleShowConversationRenameModal = useCallback(\n    async (conversationId: string) => {\n      const ret = await fetchConversation(conversationId);\n      if (ret.code === 0) {\n        setConversation(ret.data);\n      }\n      showConversationRenameModal();\n    },\n    [showConversationRenameModal, fetchConversation],\n  );\n\n  return {\n    conversationRenameLoading: loading,\n    initialConversationName: conversation.name,\n    onConversationRenameOk,\n    conversationRenameVisible,\n    hideConversationRenameModal,\n    showConversationRenameModal: handleShowConversationRenameModal,\n  };\n};\n\nexport const useGetSendButtonDisabled = () => {\n  const { dialogId, conversationId } = useGetChatSearchParams();\n\n  return dialogId === '' || conversationId === '';\n};\n\nexport const useSendButtonDisabled = (value: string) => {\n  return trim(value) === '';\n};\n\nexport const useCreateConversationBeforeUploadDocument = () => {\n  const { setConversation } = useSetConversation();\n  const { dialogId } = useGetChatSearchParams();\n  const { getConversationIsNew } = useSetChatRouteParams();\n\n  const createConversationBeforeUploadDocument = useCallback(\n    async (message: string) => {\n      const isNew = getConversationIsNew();\n      if (isNew === 'true') {\n        const data = await setConversation(message, true);\n\n        return data;\n      }\n    },\n    [setConversation, getConversationIsNew],\n  );\n\n  return {\n    createConversationBeforeUploadDocument,\n    dialogId,\n  };\n};\n//#endregion\n","import { MessageType, SharedFrom } from '@/constants/chat';\nimport { useCreateNextSharedConversation } from '@/hooks/chat-hooks';\nimport {\n  useSelectDerivedMessages,\n  useSendMessageWithSse,\n} from '@/hooks/logic-hooks';\nimport { Message } from '@/interfaces/database/chat';\nimport { message } from 'antd';\nimport { get } from 'lodash';\nimport trim from 'lodash/trim';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useSearchParams } from 'umi';\nimport { v4 as uuid } from 'uuid';\nimport { useHandleMessageInputChange } from './hooks';\n\nconst isCompletionError = (res: any) =>\n  res && (res?.response.status !== 200 || res?.data?.code !== 0);\n\nexport const useSendButtonDisabled = (value: string) => {\n  return trim(value) === '';\n};\n\nexport const useGetSharedChatSearchParams = () => {\n  const [searchParams] = useSearchParams();\n\n  return {\n    from: searchParams.get('from') as SharedFrom,\n    sharedId: searchParams.get('shared_id'),\n  };\n};\n\nexport const useSendSharedMessage = () => {\n  const { from, sharedId: conversationId } = useGetSharedChatSearchParams();\n  const { createSharedConversation: setConversation } =\n    useCreateNextSharedConversation();\n  const { handleInputChange, value, setValue } = useHandleMessageInputChange();\n  const { send, answer, done } = useSendMessageWithSse(\n    `/api/v1/${from === SharedFrom.Agent ? 'agentbots' : 'chatbots'}/${conversationId}/completions`,\n  );\n  const {\n    derivedMessages,\n    ref,\n    removeLatestMessage,\n    addNewestAnswer,\n    addNewestQuestion,\n  } = useSelectDerivedMessages();\n  const [hasError, setHasError] = useState(false);\n\n  const sendMessage = useCallback(\n    async (message: Message, id?: string) => {\n      const res = await send({\n        conversation_id: id ?? conversationId,\n        quote: true,\n        question: message.content,\n        session_id: get(derivedMessages, '0.session_id'),\n      });\n\n      if (isCompletionError(res)) {\n        // cancel loading\n        setValue(message.content);\n        removeLatestMessage();\n      }\n    },\n    [send, conversationId, derivedMessages, setValue, removeLatestMessage],\n  );\n\n  const handleSendMessage = useCallback(\n    async (message: Message) => {\n      if (conversationId !== '') {\n        sendMessage(message);\n      } else {\n        const data = await setConversation('user id');\n        if (data.code === 0) {\n          const id = data.data.id;\n          sendMessage(message, id);\n        }\n      }\n    },\n    [conversationId, setConversation, sendMessage],\n  );\n\n  const fetchSessionId = useCallback(async () => {\n    const ret = await send({ question: '' });\n    if (isCompletionError(ret)) {\n      message.error(ret?.data.message);\n      setHasError(true);\n    }\n  }, [send]);\n\n  useEffect(() => {\n    fetchSessionId();\n  }, [fetchSessionId, send]);\n\n  useEffect(() => {\n    if (answer.answer) {\n      addNewestAnswer(answer);\n    }\n  }, [answer, addNewestAnswer]);\n\n  const handlePressEnter = useCallback(\n    (documentIds: string[]) => {\n      if (trim(value) === '') return;\n      const id = uuid();\n      if (done) {\n        setValue('');\n        addNewestQuestion({\n          content: value,\n          doc_ids: documentIds,\n          id,\n          role: MessageType.User,\n        });\n        handleSendMessage({\n          content: value.trim(),\n          id,\n          role: MessageType.User,\n        });\n      }\n    },\n    [addNewestQuestion, done, handleSendMessage, setValue, value],\n  );\n\n  return {\n    handlePressEnter,\n    handleInputChange,\n    value,\n    sendLoading: !done,\n    ref,\n    loading: false,\n    derivedMessages,\n    hasError,\n  };\n};\n","/**\n * @param  {String}  url\n * @param  {Boolean} isNoCaseSensitive 是否区分大小写\n * @return {Object}\n */\n// import numeral from 'numeral';\n\nimport { Base64 } from 'js-base64';\nimport JSEncrypt from 'jsencrypt';\n\nexport const getWidth = () => {\n  return { width: window.innerWidth };\n};\nexport const rsaPsw = (password: string) => {\n  const pub =\n    '-----BEGIN PUBLIC KEY-----MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArq9XTUSeYr2+N1h3Afl/z8Dse/2yD0ZGrKwx+EEEcdsBLca9Ynmx3nIB5obmLlSfmskLpBo0UACBmB5rEjBp2Q2f3AG3Hjd4B+gNCG6BDaawuDlgANIhGnaTLrIqWrrcm4EMzJOnAOI1fgzJRsOOUEfaS318Eq9OVO3apEyCCt0lOQK6PuksduOjVxtltDav+guVAA068NrPYmRNabVKRNLJpL8w4D44sfth5RvZ3q9t+6RTArpEtc5sh5ChzvqPOzKGMXW83C95TxmXqpbK6olN4RevSfVjEAgCydH6HN6OhtOQEcnrU97r9H0iZOWwbw3pVrZiUkuRD1R56Wzs2wIDAQAB-----END PUBLIC KEY-----';\n  const encryptor = new JSEncrypt();\n\n  encryptor.setPublicKey(pub);\n\n  return encryptor.encrypt(Base64.encode(password));\n};\n\nexport default {\n  getWidth,\n  rsaPsw,\n};\n\nexport const getFileExtension = (filename: string) =>\n  filename.slice(filename.lastIndexOf('.') + 1).toLowerCase();\n"],"names":["useClickDialogCard","_useSearchParams","useSearchParams","_useSearchParams2","_slicedToArray","setSearchParams","newQueryParameters","useMemo","URLSearchParams","handleClickDialog","useCallback","dialogId","set","ChatSearchParams","DialogId","useClickConversationCard","_useSearchParams3","_useSearchParams4","currentQueryParameters","toString","handleClickConversation","conversationId","isNew","ConversationId","useGetChatSearchParams","_useSearchParams5","get","useFetchNextDialogList","_queryFn","_useQuery","useQuery","queryKey","initialData","gcTime","refetchOnWindowFocus","queryFn","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_data$data","_len","params","_key","_yield$chatService$li","data","list","_args","arguments","wrap","_context","prev","next","length","Array","console","log","chatService","listDialog","sent","code","every","x","id","history","push","abrupt","stop","apply","loading","isFetching","refetch","useSetNextDialog","_mutationFn","queryClient","useQueryClient","_useMutation","useMutation","mutationKey","mutationFn","_callee2","_yield$chatService$se","_context2","setDialog","invalidateQueries","exact","message","success","i18n","t","concat","dialog_id","_x","isPending","mutateAsync","useFetchNextDialog","_queryFn2","_useQuery2","enabled","_callee3","_data$data2","_yield$chatService$ge","_context3","getDialog","useFetchManualDialog","_mutationFn2","_useMutation2","_callee4","_yield$chatService$ge2","_context4","_x2","fetchDialog","useRemoveNextDialog","_mutationFn3","_useMutation3","_callee5","dialogIds","_yield$chatService$re","_context5","removeDialog","_x3","useFetchNextConversationList","_queryFn3","_useQuery3","_callee6","_yield$chatService$li2","_context6","listConversation","useFetchNextConversation","_queryFn4","_useGetChatSearchPara4","sharedId","useGetSharedChatSearchParams","_useQuery4","_callee7","_data$data3","_yield$chatService$ge3","_data","conversation","messageList","_context7","isConversationIdExist","getConversation","buildMessageListWithUuid","_objectSpread","useFetchNextConversationSSE","_queryFn5","_useQuery5","_callee8","_data2$data","_yield$chatService$ge4","_data2","_context8","getConversationSSE","useFetchManualConversation","_mutationFn4","_useMutation4","_callee9","_yield$chatService$ge5","_context9","_x4","fetchConversation","useUpdateNextConversation","_mutationFn5","_useMutation5","_callee10","_yield$chatService$se2","_context10","setConversation","conversation_id","getConversationId","_x5","updateConversation","useRemoveNextConversation","_mutationFn6","_useMutation6","_callee11","conversationIds","_yield$chatService$re2","_context11","removeConversation","_x6","useDeleteMessage","_mutationFn7","_useMutation7","_callee12","messageId","_yield$chatService$de","_context12","deleteMessage","_x7","useFeedback","_mutationFn8","_useMutation8","_callee13","_yield$chatService$th","_context13","thumbup","_x8","feedback","useCreateNextSharedConversation","_mutationFn11","_useMutation11","_callee18","userId","_yield$chatService$cr2","_context18","createExternalConversation","_x11","createSharedConversation","useFetchMindMap","_mutationFn12","_useMutation12","_callee20","_ret$data$data","_ret$data","ret","_context20","getMindMap","t0","has","error","_x12","fetchMindMap","useFetchRelatedQuestions","_mutationFn13","_useMutation13","_callee21","question","_data$data8","_yield$chatService$ge8","_context21","getRelatedQuestions","_x13","fetchRelatedQuestions","useSetChatRouteParams","setConversationIsNew","value","getConversationIsNew","useSelectPromptConfigParameters","currentDialog","_currentDialog$prompt","_currentDialog$prompt2","parameters","prompt_config","map","key","uuid","variable","optional","useDeleteDialog","showDeleteConfirm","useShowDeleteConfirm","onRemoveDialog","onOk","useHandleItemHover","_useState","useState","_useState2","activated","setActivated","handleItemEnter","handleItemLeave","useEditDialog","_useState3","_useState4","dialog","_useSetNextDialog","submitDialog","_useSetModalState","useSetModalState","dialogEditVisible","visible","hideDialogEditModal","hideModal","showDialogEditModal","showModal","onDialogEditOk","_ref","handleShowDialogEditModal","_ref2","clearDialog","dialogSettingLoading","initialDialog","useSelectDerivedConversationList","_currentDialog$prompt3","_currentDialog$prompt4","useTranslate","_useState5","_useState6","setList","_useFetchNextConversa","conversationList","prologue","setNewConversationRouteParams","addTemporaryConversation","pre","name","is_new","content","role","MessageType","Assistant","_toConsumableArray","useEffect","useSetConversation","_ref3","_args3","undefined","useHandleMessageInputChange","_useState7","_useState8","setValue","handleInputChange","e","nextValue","target","replaceAll","useSendNextMessage","controller","_useHandleMessageInpu","_useSendMessageWithSs","useSendMessageWithSse","api","completeConversation","send","answer","done","_useSelectNextMessage","_useSelectDerivedMess","useSelectDerivedMessages","ref","setDerivedMessages","derivedMessages","addNewestAnswer","addNewestQuestion","removeLatestMessage","removeMessageById","removeMessagesAfterCurrentMessage","_useFetchNextConversa2","_useGetChatSearchPara3","addPrologue","_dialog$prompt_config","nextMessage","_conversation$message","useSelectNextMessages","_useSetChatRouteParam","sendMessage","_ref5","_ref4","_ref6","_res$data","currentConversationId","messages","res","response","status","info","handleSendMessage","_ref7","regenerateMessage","useRegenerateMessage","handlePressEnter","documentIds","trim","doc_ids","User","sendLoading","useGetFileIcon","filename","ext","getFileExtension","iconPath","fileIconMap","useDeleteConversation","deleteConversation","onRemoveConversation","useRenameConversation","_useState9","_useState10","_useSetModalState2","conversationRenameVisible","hideConversationRenameModal","showConversationRenameModal","_useUpdateNextConvers2","onConversationRenameOk","_ref9","handleShowConversationRenameModal","_ref10","conversationRenameLoading","initialConversationName","useGetSendButtonDisabled","_useGetChatSearchPara5","useSendButtonDisabled","useCreateConversationBeforeUploadDocument","createConversationBeforeUploadDocument","_ref11","isCompletionError","searchParams","from","useSendSharedMessage","_useGetSharedChatSear","SharedFrom","Agent","hasError","setHasError","quote","session_id","fetchSessionId","getWidth","width","window","innerWidth","rsaPsw","password","encryptor","JSEncrypt","setPublicKey","encrypt","Base64","encode","slice","lastIndexOf","toLowerCase"],"sourceRoot":""}