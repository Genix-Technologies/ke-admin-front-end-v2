{"version":3,"file":"541.3bbc0077.async.js","mappings":"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","sources":["webpack:///./src/constants/chat.ts","webpack:///./src/constants/knowledge.ts","webpack:///./src/hooks/common-hooks.tsx","webpack:///./src/hooks/knowledge-hooks.ts","webpack:///./src/hooks/logic-hooks.ts","webpack:///./src/hooks/route-hook.ts","webpack:///./src/services/knowledge-service.ts","webpack:///./src/utils/chat.ts","webpack:///./src/hooks/ lazy namespace object"],"sourcesContent":["export enum MessageType {\n  Assistant = 'assistant',\n  User = 'user',\n}\n\nexport const variableEnabledFieldMap = {\n  temperatureEnabled: 'temperature',\n  topPEnabled: 'top_p',\n  presencePenaltyEnabled: 'presence_penalty',\n  frequencyPenaltyEnabled: 'frequency_penalty',\n  maxTokensEnabled: 'max_tokens',\n};\n\nexport enum SharedFrom {\n  Agent = 'agent',\n  Chat = 'chat',\n}\n\nexport enum ChatSearchParams {\n  DialogId = 'dialogId',\n  ConversationId = 'conversationId',\n  isNew = 'isNew',\n}\n\nexport const EmptyConversationId = 'empty';\n","export enum KnowledgeRouteKey {\n  Dataset = 'dataset',\n  Testing = 'testing',\n  Configuration = 'configuration',\n  KnowledgeGraph = 'knowledgeGraph',\n}\n\nexport const DatasetBaseKey = 'dataset';\n\nexport enum RunningStatus {\n  UNSTART = '0', // need to run\n  RUNNING = '1', // need to cancel\n  CANCEL = '2', // need to refresh\n  DONE = '3', // need to refresh\n  FAIL = '4', // need to refresh\n}\n\nexport enum ModelVariableType {\n  Improvise = 'Improvise',\n  Precise = 'Precise',\n  Balance = 'Balance',\n}\n\nexport const settledModelVariableMap = {\n  [ModelVariableType.Improvise]: {\n    temperature: 0.9,\n    top_p: 0.9,\n    frequency_penalty: 0.2,\n    presence_penalty: 0.4,\n    max_tokens: 512,\n  },\n  [ModelVariableType.Precise]: {\n    temperature: 0.1,\n    top_p: 0.3,\n    frequency_penalty: 0.7,\n    presence_penalty: 0.4,\n    max_tokens: 512,\n  },\n  [ModelVariableType.Balance]: {\n    temperature: 0.5,\n    top_p: 0.5,\n    frequency_penalty: 0.7,\n    presence_penalty: 0.4,\n    max_tokens: 512,\n  },\n};\n\nexport enum LlmModelType {\n  Embedding = 'embedding',\n  Chat = 'chat',\n  Image2text = 'image2text',\n  Speech2text = 'speech2text',\n  Rerank = 'rerank',\n  TTS = 'tts',\n}\n\nexport enum KnowledgeSearchParams {\n  DocumentId = 'doc_id',\n  KnowledgeId = 'id',\n}\n\nexport enum DocumentType {\n  Virtual = 'virtual',\n  Visual = 'visual',\n}\n\nexport enum DocumentParserType {\n  Naive = 'naive',\n  Qa = 'qa',\n  Resume = 'resume',\n  Manual = 'manual',\n  Table = 'table',\n  Paper = 'paper',\n  Book = 'book',\n  Laws = 'laws',\n  Presentation = 'presentation',\n  Picture = 'picture',\n  One = 'one',\n  Audio = 'audio',\n  Email = 'email',\n  Tag = 'tag',\n}\n","import { ExclamationCircleFilled } from '@ant-design/icons';\nimport { App } from 'antd';\nimport isEqual from 'lodash/isEqual';\nimport { ReactNode, useCallback, useEffect, useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nexport const useSetModalState = () => {\n  const [visible, setVisible] = useState(false);\n\n  const showModal = useCallback(() => {\n    setVisible(true);\n  }, []);\n  const hideModal = useCallback(() => {\n    setVisible(false);\n  }, []);\n\n  const switchVisible = useCallback(() => {\n    setVisible(!visible);\n  }, [visible]);\n\n  return { visible, showModal, hideModal, switchVisible };\n};\n\nexport const useDeepCompareEffect = (\n  effect: React.EffectCallback,\n  deps: React.DependencyList,\n) => {\n  const ref = useRef<React.DependencyList>();\n  let callback: ReturnType<React.EffectCallback> = () => {};\n  if (!isEqual(deps, ref.current)) {\n    callback = effect();\n    ref.current = deps;\n  }\n  useEffect(() => {\n    return () => {\n      if (callback) {\n        callback();\n      }\n    };\n  }, []);\n};\n\nexport interface UseDynamicSVGImportOptions {\n  onCompleted?: (\n    name: string,\n    SvgIcon: React.FC<React.SVGProps<SVGSVGElement>> | undefined,\n  ) => void;\n  onError?: (err: Error) => void;\n}\n\nexport function useDynamicSVGImport(\n  name: string,\n  options: UseDynamicSVGImportOptions = {},\n) {\n  const ImportedIconRef = useRef<React.FC<React.SVGProps<SVGSVGElement>>>();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<Error>();\n\n  const { onCompleted, onError } = options;\n  useEffect(() => {\n    setLoading(true);\n    const importIcon = async (): Promise<void> => {\n      try {\n        ImportedIconRef.current = (await import(name)).ReactComponent;\n        onCompleted?.(name, ImportedIconRef.current);\n      } catch (err: any) {\n        onError?.(err);\n        setError(err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    importIcon();\n  }, [name, onCompleted, onError]);\n\n  return { error, loading, SvgIcon: ImportedIconRef.current };\n}\n\ninterface IProps {\n  title?: string;\n  content?: ReactNode;\n  onOk?: (...args: any[]) => any;\n  onCancel?: (...args: any[]) => any;\n}\n\nexport const useShowDeleteConfirm = () => {\n  const { modal } = App.useApp();\n  const { t } = useTranslation();\n\n  const showDeleteConfirm = useCallback(\n    ({ title, content, onOk, onCancel }: IProps): Promise<number> => {\n      return new Promise((resolve, reject) => {\n        modal.confirm({\n          title: title ?? t('common.deleteModalTitle'),\n          icon: <ExclamationCircleFilled />,\n          content,\n          okText: t('common.ok'),\n          okType: 'danger',\n          cancelText: t('common.cancel'),\n          async onOk() {\n            try {\n              const ret = await onOk?.();\n              resolve(ret);\n              console.info(ret);\n            } catch (error) {\n              reject(error);\n            }\n          },\n          onCancel() {\n            onCancel?.();\n          },\n        });\n      });\n    },\n    [t, modal],\n  );\n\n  return showDeleteConfirm;\n};\n\nexport const useTranslate = (keyPrefix: string) => {\n  return useTranslation('translation', { keyPrefix });\n};\n\nexport const useCommonTranslation = () => {\n  return useTranslation('translation', { keyPrefix: 'common' });\n};\n","import { ResponsePostType } from '@/interfaces/database/base';\nimport {\n  IKnowledge,\n  IKnowledgeGraph,\n  IRenameTag,\n  ITestingResult,\n} from '@/interfaces/database/knowledge';\nimport i18n from '@/locales/config';\nimport kbService, {\n  getKnowledgeGraph,\n  listTag,\n  removeTag,\n  renameTag,\n} from '@/services/knowledge-service';\nimport {\n  useInfiniteQuery,\n  useIsMutating,\n  useMutation,\n  useMutationState,\n  useQuery,\n  useQueryClient,\n} from '@tanstack/react-query';\nimport { useDebounce } from 'ahooks';\nimport { message } from 'antd';\nimport { useState } from 'react';\nimport { useSearchParams } from 'umi';\nimport { useHandleSearchChange } from './logic-hooks';\nimport { useSetPaginationParams } from './route-hook';\n\nexport const useKnowledgeBaseId = (): string => {\n  const [searchParams] = useSearchParams();\n  const knowledgeBaseId = searchParams.get('id');\n\n  return knowledgeBaseId || '';\n};\n\nexport const useFetchKnowledgeBaseConfiguration = () => {\n  const knowledgeBaseId = useKnowledgeBaseId();\n\n  const { data, isFetching: loading } = useQuery<IKnowledge>({\n    queryKey: ['fetchKnowledgeDetail'],\n    initialData: {} as IKnowledge,\n    gcTime: 0,\n    queryFn: async () => {\n      const { data } = await kbService.get_kb_detail({\n        kb_id: knowledgeBaseId,\n      });\n      return data?.data ?? {};\n    },\n  });\n\n  return { data, loading };\n};\n\nexport const useFetchKnowledgeList = (\n  shouldFilterListWithoutDocument: boolean = false,\n): {\n  list: IKnowledge[];\n  loading: boolean;\n} => {\n  const { data, isFetching: loading } = useQuery({\n    queryKey: ['fetchKnowledgeList'],\n    initialData: [],\n    gcTime: 0, // https://tanstack.com/query/latest/docs/framework/react/guides/caching?from=reactQueryV3\n    queryFn: async () => {\n      const { data } = await kbService.getList();\n      const list = data?.data?.kbs ?? [];\n      return shouldFilterListWithoutDocument\n        ? list.filter((x: IKnowledge) => x.chunk_num > 0)\n        : list;\n    },\n  });\n\n  return { list: data, loading };\n};\n\nexport const useSelectKnowledgeOptions = () => {\n  const { list } = useFetchKnowledgeList();\n\n  const options = list?.map((item) => ({\n    label: item.name,\n    value: item.id,\n  }));\n\n  return options;\n};\n\nexport const useInfiniteFetchKnowledgeList = () => {\n  const { searchString, handleInputChange } = useHandleSearchChange();\n  const debouncedSearchString = useDebounce(searchString, { wait: 500 });\n\n  const PageSize = 30;\n  const {\n    data,\n    error,\n    fetchNextPage,\n    hasNextPage,\n    isFetching,\n    isFetchingNextPage,\n    status,\n  } = useInfiniteQuery({\n    queryKey: ['infiniteFetchKnowledgeList', debouncedSearchString],\n    queryFn: async ({ pageParam }) => {\n      const { data } = await kbService.getList({\n        page: pageParam,\n        page_size: PageSize,\n        keywords: debouncedSearchString,\n      });\n      const list = data?.data ?? [];\n      return list;\n    },\n    initialPageParam: 1,\n    getNextPageParam: (lastPage, pages, lastPageParam) => {\n      if (lastPageParam * PageSize <= lastPage.total) {\n        return lastPageParam + 1;\n      }\n      return undefined;\n    },\n  });\n  return {\n    data,\n    loading: isFetching,\n    error,\n    fetchNextPage,\n    hasNextPage,\n    isFetching,\n    isFetchingNextPage,\n    status,\n    handleInputChange,\n    searchString,\n  };\n};\n\nexport const useCreateKnowledge = () => {\n  const queryClient = useQueryClient();\n  const {\n    data,\n    isPending: loading,\n    mutateAsync,\n  } = useMutation({\n    mutationKey: ['createKnowledge'],\n    mutationFn: async (params: { id?: string; name: string }) => {\n      const { data = {} } = await kbService.createKb(params);\n      if (data.code === 0) {\n        message.success(\n          i18n.t(`message.${params?.id ? 'modified' : 'created'}`),\n        );\n        queryClient.invalidateQueries({ queryKey: ['fetchKnowledgeList'] });\n      }\n      return data;\n    },\n  });\n\n  return { data, loading, createKnowledge: mutateAsync };\n};\n\nexport const useDeleteKnowledge = () => {\n  const queryClient = useQueryClient();\n  const {\n    data,\n    isPending: loading,\n    mutateAsync,\n  } = useMutation({\n    mutationKey: ['deleteKnowledge'],\n    mutationFn: async (id: string) => {\n      const { data } = await kbService.rmKb({ kb_id: id });\n      if (data.code === 0) {\n        message.success(i18n.t(`message.deleted`));\n        queryClient.invalidateQueries({\n          queryKey: ['infiniteFetchKnowledgeList'],\n        });\n      }\n      return data?.data ?? [];\n    },\n  });\n\n  return { data, loading, deleteKnowledge: mutateAsync };\n};\n\n//#region knowledge configuration\n\nexport const useUpdateKnowledge = () => {\n  const knowledgeBaseId = useKnowledgeBaseId();\n  const queryClient = useQueryClient();\n  const {\n    data,\n    isPending: loading,\n    mutateAsync,\n  } = useMutation({\n    mutationKey: ['saveKnowledge'],\n    mutationFn: async (params: Record<string, any>) => {\n      const { data = {} } = await kbService.updateKb({\n        kb_id: knowledgeBaseId,\n        ...params,\n      });\n      if (data.code === 0) {\n        message.success(i18n.t(`message.updated`));\n        queryClient.invalidateQueries({ queryKey: ['fetchKnowledgeDetail'] });\n      }\n      return data;\n    },\n  });\n\n  return { data, loading, saveKnowledgeConfiguration: mutateAsync };\n};\n\n//#endregion\n\n//#region Retrieval testing\n\nexport const useTestChunkRetrieval = (): ResponsePostType<ITestingResult> & {\n  testChunk: (...params: any[]) => void;\n} => {\n  const knowledgeBaseId = useKnowledgeBaseId();\n  const { page, size: pageSize } = useSetPaginationParams();\n\n  const {\n    data,\n    isPending: loading,\n    mutateAsync,\n  } = useMutation({\n    mutationKey: ['testChunk'], // This method is invalid\n    gcTime: 0,\n    mutationFn: async (values: any) => {\n      const { data } = await kbService.retrieval_test({\n        ...values,\n        kb_id: values.kb_id ?? knowledgeBaseId,\n        page,\n        size: pageSize,\n      });\n      if (data.code === 0) {\n        const res = data.data;\n        return {\n          ...res,\n          documents: res.doc_aggs,\n        };\n      }\n      return (\n        data?.data ?? {\n          chunks: [],\n          documents: [],\n          total: 0,\n        }\n      );\n    },\n  });\n\n  return {\n    data: data ?? { chunks: [], documents: [], total: 0 },\n    loading,\n    testChunk: mutateAsync,\n  };\n};\n\nexport const useChunkIsTesting = () => {\n  return useIsMutating({ mutationKey: ['testChunk'] }) > 0;\n};\n\nexport const useSelectTestingResult = (): ITestingResult => {\n  const data = useMutationState({\n    filters: { mutationKey: ['testChunk'] },\n    select: (mutation) => {\n      return mutation.state.data;\n    },\n  });\n  return (data.at(-1) ?? {\n    chunks: [],\n    documents: [],\n    total: 0,\n  }) as ITestingResult;\n};\n\nexport const useSelectIsTestingSuccess = () => {\n  const status = useMutationState({\n    filters: { mutationKey: ['testChunk'] },\n    select: (mutation) => {\n      return mutation.state.status;\n    },\n  });\n  return status.at(-1) === 'success';\n};\n//#endregion\n\n//#region tags\n\nexport const useFetchTagList = () => {\n  const knowledgeBaseId = useKnowledgeBaseId();\n\n  const { data, isFetching: loading } = useQuery<Array<[string, number]>>({\n    queryKey: ['fetchTagList'],\n    initialData: [],\n    gcTime: 0, // https://tanstack.com/query/latest/docs/framework/react/guides/caching?from=reactQueryV3\n    queryFn: async () => {\n      const { data } = await listTag(knowledgeBaseId);\n      const list = data?.data || [];\n      return list;\n    },\n  });\n\n  return { list: data, loading };\n};\n\nexport const useDeleteTag = () => {\n  const knowledgeBaseId = useKnowledgeBaseId();\n\n  const queryClient = useQueryClient();\n  const {\n    data,\n    isPending: loading,\n    mutateAsync,\n  } = useMutation({\n    mutationKey: ['deleteTag'],\n    mutationFn: async (tags: string[]) => {\n      const { data } = await removeTag(knowledgeBaseId, tags);\n      if (data.code === 0) {\n        message.success(i18n.t(`message.deleted`));\n        queryClient.invalidateQueries({\n          queryKey: ['fetchTagList'],\n        });\n      }\n      return data?.data ?? [];\n    },\n  });\n\n  return { data, loading, deleteTag: mutateAsync };\n};\n\nexport const useRenameTag = () => {\n  const knowledgeBaseId = useKnowledgeBaseId();\n\n  const queryClient = useQueryClient();\n  const {\n    data,\n    isPending: loading,\n    mutateAsync,\n  } = useMutation({\n    mutationKey: ['renameTag'],\n    mutationFn: async (params: IRenameTag) => {\n      const { data } = await renameTag(knowledgeBaseId, params);\n      if (data.code === 0) {\n        message.success(i18n.t(`message.modified`));\n        queryClient.invalidateQueries({\n          queryKey: ['fetchTagList'],\n        });\n      }\n      return data?.data ?? [];\n    },\n  });\n\n  return { data, loading, renameTag: mutateAsync };\n};\n\nexport const useTagIsRenaming = () => {\n  return useIsMutating({ mutationKey: ['renameTag'] }) > 0;\n};\n\nexport const useFetchTagListByKnowledgeIds = () => {\n  const [knowledgeIds, setKnowledgeIds] = useState<string[]>([]);\n\n  const { data, isFetching: loading } = useQuery<Array<[string, number]>>({\n    queryKey: ['fetchTagListByKnowledgeIds'],\n    enabled: knowledgeIds.length > 0,\n    initialData: [],\n    gcTime: 0, // https://tanstack.com/query/latest/docs/framework/react/guides/caching?from=reactQueryV3\n    queryFn: async () => {\n      const { data } = await kbService.listTagByKnowledgeIds({\n        kb_ids: knowledgeIds.join(','),\n      });\n      const list = data?.data || [];\n      return list;\n    },\n  });\n\n  return { list: data, loading, setKnowledgeIds };\n};\n\n//#endregion\n\nexport function useFetchKnowledgeGraph() {\n  const knowledgeBaseId = useKnowledgeBaseId();\n\n  const { data, isFetching: loading } = useQuery<IKnowledgeGraph>({\n    queryKey: ['fetchKnowledgeGraph', knowledgeBaseId],\n    initialData: { graph: {}, mind_map: {} } as IKnowledgeGraph,\n    enabled: !!knowledgeBaseId,\n    gcTime: 0,\n    queryFn: async () => {\n      const { data } = await getKnowledgeGraph(knowledgeBaseId);\n      return data?.data;\n    },\n  });\n\n  return { data, loading };\n}\n","import { Authorization } from '@/constants/authorization';\nimport { MessageType } from '@/constants/chat';\nimport { LanguageTranslationMap } from '@/constants/common';\nimport { ResponseType } from '@/interfaces/database/base';\nimport { IAnswer, Message } from '@/interfaces/database/chat';\nimport { IKnowledgeFile } from '@/interfaces/database/knowledge';\nimport { IClientConversation, IMessage } from '@/pages/chat/interface';\nimport api from '@/utils/api';\nimport { getAuthorization } from '@/utils/authorization-util';\nimport { buildMessageUuid } from '@/utils/chat';\nimport { PaginationProps, message } from 'antd';\nimport { FormInstance } from 'antd/lib';\nimport axios from 'axios';\nimport { EventSourceParserStream } from 'eventsource-parser/stream';\nimport { omit } from 'lodash';\nimport {\n  ChangeEventHandler,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { v4 as uuid } from 'uuid';\nimport { useTranslate } from './common-hooks';\nimport { useSetPaginationParams } from './route-hook';\nimport { useFetchTenantInfo, useSaveSetting } from './user-setting-hooks';\n\nexport const useSetSelectedRecord = <T = IKnowledgeFile>() => {\n  const [currentRecord, setCurrentRecord] = useState<T>({} as T);\n\n  const setRecord = (record: T) => {\n    setCurrentRecord(record);\n  };\n\n  return { currentRecord, setRecord };\n};\n\nexport const useHandleSearchChange = () => {\n  const [searchString, setSearchString] = useState('');\n\n  const handleInputChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n      const value = e.target.value;\n      setSearchString(value);\n    },\n    [],\n  );\n\n  return { handleInputChange, searchString };\n};\n\nexport const useChangeLanguage = () => {\n  const { i18n } = useTranslation();\n  const { saveSetting } = useSaveSetting();\n\n  const changeLanguage = (lng: string) => {\n    i18n.changeLanguage(\n      LanguageTranslationMap[lng as keyof typeof LanguageTranslationMap],\n    );\n    saveSetting({ language: lng });\n  };\n\n  return changeLanguage;\n};\n\nexport const useGetPaginationWithRouter = () => {\n  const { t } = useTranslate('common');\n  const {\n    setPaginationParams,\n    page,\n    size: pageSize,\n  } = useSetPaginationParams();\n\n  const onPageChange: PaginationProps['onChange'] = useCallback(\n    (pageNumber: number, pageSize: number) => {\n      setPaginationParams(pageNumber, pageSize);\n    },\n    [setPaginationParams],\n  );\n\n  const setCurrentPagination = useCallback(\n    (pagination: { page: number; pageSize?: number }) => {\n      setPaginationParams(pagination.page, pagination.pageSize);\n    },\n    [setPaginationParams],\n  );\n\n  const pagination: PaginationProps = useMemo(() => {\n    return {\n      showQuickJumper: true,\n      total: 0,\n      showSizeChanger: true,\n      current: page,\n      pageSize: pageSize,\n      pageSizeOptions: [1, 2, 10, 20, 50, 100],\n      onChange: onPageChange,\n      showTotal: (total) => `${t('total')} ${total}`,\n    };\n  }, [t, onPageChange, page, pageSize]);\n\n  return {\n    pagination,\n    setPagination: setCurrentPagination,\n  };\n};\n\nexport const useGetPagination = () => {\n  const [pagination, setPagination] = useState({ page: 1, pageSize: 10 });\n  const { t } = useTranslate('common');\n\n  const onPageChange: PaginationProps['onChange'] = useCallback(\n    (pageNumber: number, pageSize: number) => {\n      setPagination({ page: pageNumber, pageSize });\n    },\n    [],\n  );\n\n  const currentPagination: PaginationProps = useMemo(() => {\n    return {\n      showQuickJumper: true,\n      total: 0,\n      showSizeChanger: true,\n      current: pagination.page,\n      pageSize: pagination.pageSize,\n      pageSizeOptions: [1, 2, 10, 20, 50, 100],\n      onChange: onPageChange,\n      showTotal: (total) => `${t('total')} ${total}`,\n    };\n  }, [t, onPageChange, pagination]);\n\n  return {\n    pagination: currentPagination,\n  };\n};\n\nexport interface AppConf {\n  appName: string;\n}\n\nexport const useFetchAppConf = () => {\n  const [appConf, setAppConf] = useState<AppConf>({} as AppConf);\n  const fetchAppConf = useCallback(async () => {\n    const ret = await axios.get('/conf.json');\n\n    setAppConf(ret.data);\n  }, []);\n\n  useEffect(() => {\n    fetchAppConf();\n  }, [fetchAppConf]);\n\n  return appConf;\n};\n\nexport const useSendMessageWithSse = (\n  url: string = api.completeConversation,\n) => {\n  const [answer, setAnswer] = useState<IAnswer>({} as IAnswer);\n  const [done, setDone] = useState(true);\n  const timer = useRef<any>();\n\n  const resetAnswer = useCallback(() => {\n    if (timer.current) {\n      clearTimeout(timer.current);\n    }\n    timer.current = setTimeout(() => {\n      setAnswer({} as IAnswer);\n      clearTimeout(timer.current);\n    }, 1000);\n  }, []);\n\n  const send = useCallback(\n    async (\n      body: any,\n      controller?: AbortController,\n    ): Promise<{ response: Response; data: ResponseType } | undefined> => {\n      try {\n        setDone(false);\n        const response = await fetch(url, {\n          method: 'POST',\n          headers: {\n            [Authorization]: getAuthorization(),\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(body),\n          signal: controller?.signal,\n        });\n\n        const res = response.clone().json();\n\n        const reader = response?.body\n          ?.pipeThrough(new TextDecoderStream())\n          .pipeThrough(new EventSourceParserStream())\n          .getReader();\n\n        while (true) {\n          const x = await reader?.read();\n          if (x) {\n            const { done, value } = x;\n            if (done) {\n              console.info('done');\n              resetAnswer();\n              break;\n            }\n            try {\n              const val = JSON.parse(value?.data || '');\n              const d = val?.data;\n              if (typeof d !== 'boolean') {\n                console.info('data:', d);\n                setAnswer({\n                  ...d,\n                  conversationId: body?.conversation_id,\n                });\n              }\n            } catch (e) {\n              console.warn(e);\n            }\n          }\n        }\n        console.info('done?');\n        setDone(true);\n        resetAnswer();\n        return { data: await res, response };\n      } catch (e) {\n        setDone(true);\n        resetAnswer();\n\n        console.warn(e);\n      }\n    },\n    [url, resetAnswer],\n  );\n\n  return { send, answer, done, setDone, resetAnswer };\n};\n\nexport const useSpeechWithSse = (url: string = api.tts) => {\n  const read = useCallback(\n    async (body: any) => {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          [Authorization]: getAuthorization(),\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(body),\n      });\n      try {\n        const res = await response.clone().json();\n        if (res?.code !== 0) {\n          message.error(res?.message);\n        }\n      } catch (error) {\n        console.warn('🚀 ~ error:', error);\n      }\n      return response;\n    },\n    [url],\n  );\n\n  return { read };\n};\n\n//#region chat hooks\n\nexport const useScrollToBottom = (messages?: unknown) => {\n  const ref = useRef<HTMLDivElement>(null);\n\n  const scrollToBottom = useCallback(() => {\n    if (messages) {\n      ref.current?.scrollIntoView({ behavior: 'instant' });\n    }\n  }, [messages]); // If the message changes, scroll to the bottom\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [scrollToBottom]);\n\n  return ref;\n};\n\nexport const useHandleMessageInputChange = () => {\n  const [value, setValue] = useState('');\n\n  const handleInputChange: ChangeEventHandler<HTMLInputElement> = (e) => {\n    const value = e.target.value;\n    const nextValue = value.replaceAll('\\\\n', '\\n').replaceAll('\\\\t', '\\t');\n    setValue(nextValue);\n  };\n\n  return {\n    handleInputChange,\n    value,\n    setValue,\n  };\n};\n\nexport const useSelectDerivedMessages = () => {\n  const [derivedMessages, setDerivedMessages] = useState<IMessage[]>([]);\n\n  const ref = useScrollToBottom(derivedMessages);\n\n  const addNewestQuestion = useCallback(\n    (message: Message, answer: string = '') => {\n      setDerivedMessages((pre) => {\n        return [\n          ...pre,\n          {\n            ...message,\n            id: buildMessageUuid(message), // The message id is generated on the front end,\n            // and the message id returned by the back end is the same as the question id,\n            //  so that the pair of messages can be deleted together when deleting the message\n          },\n          {\n            role: MessageType.Assistant,\n            content: answer,\n            id: buildMessageUuid({ ...message, role: MessageType.Assistant }),\n          },\n        ];\n      });\n    },\n    [],\n  );\n\n  // Add the streaming message to the last item in the message list\n  const addNewestAnswer = useCallback((answer: IAnswer) => {\n    setDerivedMessages((pre) => {\n      return [\n        ...(pre?.slice(0, -1) ?? []),\n        {\n          role: MessageType.Assistant,\n          content: answer.answer,\n          reference: answer.reference,\n          id: buildMessageUuid({\n            id: answer.id,\n            role: MessageType.Assistant,\n          }),\n          prompt: answer.prompt,\n          audio_binary: answer.audio_binary,\n          ...omit(answer, 'reference'),\n        },\n      ];\n    });\n  }, []);\n\n  const removeLatestMessage = useCallback(() => {\n    setDerivedMessages((pre) => {\n      const nextMessages = pre?.slice(0, -2) ?? [];\n      return nextMessages;\n    });\n  }, []);\n\n  const removeMessageById = useCallback(\n    (messageId: string) => {\n      setDerivedMessages((pre) => {\n        const nextMessages = pre?.filter((x) => x.id !== messageId) ?? [];\n        return nextMessages;\n      });\n    },\n    [setDerivedMessages],\n  );\n\n  const removeMessagesAfterCurrentMessage = useCallback(\n    (messageId: string) => {\n      setDerivedMessages((pre) => {\n        const index = pre.findIndex((x) => x.id === messageId);\n        if (index !== -1) {\n          let nextMessages = pre.slice(0, index + 2) ?? [];\n          const latestMessage = nextMessages.at(-1);\n          nextMessages = latestMessage\n            ? [\n                ...nextMessages.slice(0, -1),\n                {\n                  ...latestMessage,\n                  content: '',\n                  reference: undefined,\n                  prompt: undefined,\n                },\n              ]\n            : nextMessages;\n          return nextMessages;\n        }\n        return pre;\n      });\n    },\n    [setDerivedMessages],\n  );\n\n  return {\n    ref,\n    derivedMessages,\n    setDerivedMessages,\n    addNewestQuestion,\n    addNewestAnswer,\n    removeLatestMessage,\n    removeMessageById,\n    removeMessagesAfterCurrentMessage,\n  };\n};\n\nexport interface IRemoveMessageById {\n  removeMessageById(messageId: string): void;\n}\n\nexport const useRemoveMessagesAfterCurrentMessage = (\n  setCurrentConversation: (\n    callback: (state: IClientConversation) => IClientConversation,\n  ) => void,\n) => {\n  const removeMessagesAfterCurrentMessage = useCallback(\n    (messageId: string) => {\n      setCurrentConversation((pre) => {\n        const index = pre.message?.findIndex((x) => x.id === messageId);\n        if (index !== -1) {\n          let nextMessages = pre.message?.slice(0, index + 2) ?? [];\n          const latestMessage = nextMessages.at(-1);\n          nextMessages = latestMessage\n            ? [\n                ...nextMessages.slice(0, -1),\n                {\n                  ...latestMessage,\n                  content: '',\n                  reference: undefined,\n                  prompt: undefined,\n                },\n              ]\n            : nextMessages;\n          return {\n            ...pre,\n            message: nextMessages,\n          };\n        }\n        return pre;\n      });\n    },\n    [setCurrentConversation],\n  );\n\n  return { removeMessagesAfterCurrentMessage };\n};\n\nexport interface IRegenerateMessage {\n  regenerateMessage?: (message: Message) => void;\n}\n\nexport const useRegenerateMessage = ({\n  removeMessagesAfterCurrentMessage,\n  sendMessage,\n  messages,\n}: {\n  removeMessagesAfterCurrentMessage(messageId: string): void;\n  sendMessage({\n    message,\n  }: {\n    message: Message;\n    messages?: Message[];\n  }): void | Promise<any>;\n  messages: Message[];\n}) => {\n  const regenerateMessage = useCallback(\n    async (message: Message) => {\n      if (message.id) {\n        removeMessagesAfterCurrentMessage(message.id);\n        const index = messages.findIndex((x) => x.id === message.id);\n        let nextMessages;\n        if (index !== -1) {\n          nextMessages = messages.slice(0, index);\n        }\n        sendMessage({\n          message: { ...message, id: uuid() },\n          messages: nextMessages,\n        });\n      }\n    },\n    [removeMessagesAfterCurrentMessage, sendMessage, messages],\n  );\n\n  return { regenerateMessage };\n};\n\n// #endregion\n\n/**\n *\n * @param defaultId\n * used to switch between different items, similar to radio\n * @returns\n */\nexport const useSelectItem = (defaultId?: string) => {\n  const [selectedId, setSelectedId] = useState('');\n\n  const handleItemClick = useCallback(\n    (id: string) => () => {\n      setSelectedId(id);\n    },\n    [],\n  );\n\n  useEffect(() => {\n    if (defaultId) {\n      setSelectedId(defaultId);\n    }\n  }, [defaultId]);\n\n  return { selectedId, handleItemClick };\n};\n\nexport const useFetchModelId = () => {\n  const { data: tenantInfo } = useFetchTenantInfo(true);\n\n  return tenantInfo?.llm_id ?? '';\n};\n\nconst ChunkTokenNumMap = {\n  naive: 128,\n  knowledge_graph: 8192,\n};\n\nexport const useHandleChunkMethodSelectChange = (form: FormInstance) => {\n  // const form = Form.useFormInstance();\n  const handleChange = useCallback(\n    (value: string) => {\n      if (value in ChunkTokenNumMap) {\n        form.setFieldValue(\n          ['parser_config', 'chunk_token_num'],\n          ChunkTokenNumMap[value as keyof typeof ChunkTokenNumMap],\n        );\n      }\n    },\n    [form],\n  );\n\n  return handleChange;\n};\n\n// reset form fields when modal is form, closed\nexport const useResetFormOnCloseModal = ({\n  form,\n  visible,\n}: {\n  form: FormInstance;\n  visible?: boolean;\n}) => {\n  const prevOpenRef = useRef<boolean>();\n  useEffect(() => {\n    prevOpenRef.current = visible;\n  }, [visible]);\n  const prevOpen = prevOpenRef.current;\n\n  useEffect(() => {\n    if (!visible && prevOpen) {\n      form.resetFields();\n    }\n  }, [form, prevOpen, visible]);\n};\n","import {\n  KnowledgeRouteKey,\n  KnowledgeSearchParams,\n} from '@/constants/knowledge';\nimport { useCallback } from 'react';\nimport { useLocation, useNavigate, useSearchParams } from 'umi';\n\nexport enum SegmentIndex {\n  Second = '2',\n  Third = '3',\n}\n\nexport const useSegmentedPathName = (index: SegmentIndex) => {\n  const { pathname } = useLocation();\n\n  const pathArray = pathname.split('/');\n  return pathArray[index] || '';\n};\n\nexport const useSecondPathName = () => {\n  return useSegmentedPathName(SegmentIndex.Second);\n};\n\nexport const useThirdPathName = () => {\n  return useSegmentedPathName(SegmentIndex.Third);\n};\n\nexport const useGetKnowledgeSearchParams = () => {\n  const [currentQueryParameters] = useSearchParams();\n\n  return {\n    documentId:\n      currentQueryParameters.get(KnowledgeSearchParams.DocumentId) || '',\n    knowledgeId:\n      currentQueryParameters.get(KnowledgeSearchParams.KnowledgeId) || '',\n  };\n};\n\nexport const useNavigateWithFromState = () => {\n  const navigate = useNavigate();\n  return useCallback(\n    (path: string) => {\n      navigate(path, { state: { from: path } });\n    },\n    [navigate],\n  );\n};\n\nexport const useNavigateToDataset = () => {\n  const navigate = useNavigate();\n  const { knowledgeId } = useGetKnowledgeSearchParams();\n\n  return useCallback(() => {\n    navigate(`/knowledge/${KnowledgeRouteKey.Dataset}?id=${knowledgeId}`);\n  }, [knowledgeId, navigate]);\n};\n\nexport const useGetPaginationParams = () => {\n  const [currentQueryParameters] = useSearchParams();\n\n  return {\n    page: currentQueryParameters.get('page') || 1,\n    size: currentQueryParameters.get('size') || 10,\n  };\n};\n\nexport const useSetPaginationParams = () => {\n  const [queryParameters, setSearchParams] = useSearchParams();\n  // const newQueryParameters: URLSearchParams = useMemo(\n  //   () => new URLSearchParams(queryParameters.toString()),\n  //   [queryParameters],\n  // );\n\n  const setPaginationParams = useCallback(\n    (page: number = 1, pageSize?: number) => {\n      queryParameters.set('page', page.toString());\n      if (pageSize) {\n        queryParameters.set('size', pageSize.toString());\n      }\n      setSearchParams(queryParameters);\n    },\n    [setSearchParams, queryParameters],\n  );\n\n  return {\n    setPaginationParams,\n    page: Number(queryParameters.get('page')) || 1,\n    size: Number(queryParameters.get('size')) || 10,\n  };\n};\n","import { IRenameTag } from '@/interfaces/database/knowledge';\nimport api from '@/utils/api';\nimport registerServer from '@/utils/register-server';\nimport request, { post } from '@/utils/request';\n\nconst {\n  create_kb,\n  update_kb,\n  rm_kb,\n  get_kb_detail,\n  kb_list,\n  get_document_list,\n  document_change_status,\n  document_rm,\n  document_delete,\n  document_create,\n  document_change_parser,\n  document_thumbnails,\n  chunk_list,\n  create_chunk,\n  set_chunk,\n  get_chunk,\n  switch_chunk,\n  rm_chunk,\n  retrieval_test,\n  document_rename,\n  document_run,\n  document_upload,\n  web_crawl,\n  knowledge_graph,\n  document_infos,\n  upload_and_parse,\n  listTagByKnowledgeIds,\n  setMeta,\n} = api;\n\nconst methods = {\n  // 知识库管理\n  createKb: {\n    url: create_kb,\n    method: 'post',\n  },\n  updateKb: {\n    url: update_kb,\n    method: 'post',\n  },\n  rmKb: {\n    url: rm_kb,\n    method: 'post',\n  },\n  get_kb_detail: {\n    url: get_kb_detail,\n    method: 'get',\n  },\n  getList: {\n    url: kb_list,\n    method: 'get',\n  },\n  // document manager\n  get_document_list: {\n    url: get_document_list,\n    method: 'get',\n  },\n  document_change_status: {\n    url: document_change_status,\n    method: 'post',\n  },\n  document_rm: {\n    url: document_rm,\n    method: 'post',\n  },\n  document_rename: {\n    url: document_rename,\n    method: 'post',\n  },\n  document_create: {\n    url: document_create,\n    method: 'post',\n  },\n  document_run: {\n    url: document_run,\n    method: 'post',\n  },\n  document_change_parser: {\n    url: document_change_parser,\n    method: 'post',\n  },\n  document_thumbnails: {\n    url: document_thumbnails,\n    method: 'get',\n  },\n  document_upload: {\n    url: document_upload,\n    method: 'post',\n  },\n  web_crawl: {\n    url: web_crawl,\n    method: 'post',\n  },\n  document_infos: {\n    url: document_infos,\n    method: 'post',\n  },\n  setMeta: {\n    url: setMeta,\n    method: 'post',\n  },\n  // chunk管理\n  chunk_list: {\n    url: chunk_list,\n    method: 'post',\n  },\n  create_chunk: {\n    url: create_chunk,\n    method: 'post',\n  },\n  set_chunk: {\n    url: set_chunk,\n    method: 'post',\n  },\n  get_chunk: {\n    url: get_chunk,\n    method: 'get',\n  },\n  switch_chunk: {\n    url: switch_chunk,\n    method: 'post',\n  },\n  rm_chunk: {\n    url: rm_chunk,\n    method: 'post',\n  },\n  retrieval_test: {\n    url: retrieval_test,\n    method: 'post',\n  },\n  knowledge_graph: {\n    url: knowledge_graph,\n    method: 'get',\n  },\n  document_delete: {\n    url: document_delete,\n    method: 'delete',\n  },\n  upload_and_parse: {\n    url: upload_and_parse,\n    method: 'post',\n  },\n  listTagByKnowledgeIds: {\n    url: listTagByKnowledgeIds,\n    method: 'get',\n  },\n};\n\nconst kbService = registerServer<keyof typeof methods>(methods, request);\n\nexport const listTag = (knowledgeId: string) =>\n  request.get(api.listTag(knowledgeId));\n\nexport const removeTag = (knowledgeId: string, tags: string[]) =>\n  post(api.removeTag(knowledgeId), { tags });\n\nexport const renameTag = (\n  knowledgeId: string,\n  { fromTag, toTag }: IRenameTag,\n) => post(api.renameTag(knowledgeId), { fromTag, toTag });\n\nexport function getKnowledgeGraph(knowledgeId: string) {\n  return request.get(api.getKnowledgeGraph(knowledgeId));\n}\n\nexport default kbService;\n","import { EmptyConversationId } from '@/constants/chat';\nimport { Message } from '@/interfaces/database/chat';\nimport { IMessage } from '@/pages/chat/interface';\nimport { omit } from 'lodash';\nimport { v4 as uuid } from 'uuid';\n\nexport const isConversationIdExist = (conversationId: string) => {\n  return conversationId !== EmptyConversationId && conversationId !== '';\n};\n\nexport const buildMessageUuid = (message: Partial<Message | IMessage>) => {\n  if ('id' in message && message.id) {\n    return message.id;\n  }\n  return uuid();\n};\n\nexport const buildMessageListWithUuid = (messages?: Message[]) => {\n  return (\n    messages?.map((x: Message | IMessage) => ({\n      ...omit(x, 'reference'),\n      id: buildMessageUuid(x),\n    })) ?? []\n  );\n};\n\nexport const getConversationId = () => {\n  return uuid().replace(/-/g, '');\n};\n\n// When rendering each message, add a prefix to the id to ensure uniqueness.\nexport const buildMessageUuidWithRole = (\n  message: Partial<Message | IMessage>,\n) => {\n  return `${message.role}_${message.id}`;\n};\n\n// Preprocess LaTeX equations to be rendered by KaTeX\n// ref: https://github.com/remarkjs/react-markdown/issues/785\n\nexport const preprocessLaTeX = (content: string) => {\n  const blockProcessedContent = content.replace(\n    /\\\\\\[([\\s\\S]*?)\\\\\\]/g,\n    (_, equation) => `$$${equation}$$`,\n  );\n  const inlineProcessedContent = blockProcessedContent.replace(\n    /\\\\\\(([\\s\\S]*?)\\\\\\)/g,\n    (_, equation) => `$${equation}$`,\n  );\n  return inlineProcessedContent;\n};\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 86635;\nmodule.exports = webpackEmptyAsyncContext;"],"names":["MessageType","variableEnabledFieldMap","temperatureEnabled","topPEnabled","presencePenaltyEnabled","frequencyPenaltyEnabled","maxTokensEnabled","SharedFrom","ChatSearchParams","EmptyConversationId","KnowledgeRouteKey","RunningStatus","ModelVariableType","settledModelVariableMap","_defineProperty","Improvise","temperature","top_p","frequency_penalty","presence_penalty","max_tokens","Precise","Balance","LlmModelType","KnowledgeSearchParams","DocumentType","useSetModalState","_useState","useState","_useState2","_slicedToArray","visible","setVisible","showModal","useCallback","hideModal","switchVisible","useShowDeleteConfirm","modal","App","useApp","t","useTranslation","_ref2","title","content","onOk","onCancel","Promise","resolve","reject","confirm","icon","_jsx","ExclamationCircleFilled","okText","okType","cancelText","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","ret","wrap","_context2","prev","next","sent","console","info","t0","stop","useTranslate","keyPrefix","useKnowledgeBaseId","_useSearchParams","useSearchParams","get","useFetchKnowledgeBaseConfiguration","_queryFn","knowledgeBaseId","_useQuery","useQuery","queryKey","initialData","gcTime","queryFn","_callee","_data$data","_yield$kbService$get_","data","_context","kbService","get_kb_detail","kb_id","abrupt","apply","arguments","loading","isFetching","useFetchKnowledgeList","_queryFn2","shouldFilterListWithoutDocument","length","undefined","_useQuery2","_data$data$kbs","_data$data2","_yield$kbService$getL","list","getList","kbs","filter","x","chunk_num","useSelectKnowledgeOptions","map","item","label","name","value","id","useInfiniteFetchKnowledgeList","_queryFn3","_useHandleSearchChang","useHandleSearchChange","searchString","handleInputChange","debouncedSearchString","useDebounce","wait","_useInfiniteQuery","useInfiniteQuery","_callee3","_ref","_data$data3","pageParam","_yield$kbService$getL2","_context3","page","page_size","keywords","_x","initialPageParam","getNextPageParam","lastPage","pages","lastPageParam","total","error","fetchNextPage","hasNextPage","isFetchingNextPage","status","useCreateKnowledge","_mutationFn","queryClient","useQueryClient","_useMutation","useMutation","mutationKey","mutationFn","_callee4","params","_yield$kbService$crea","_yield$kbService$crea2","_context4","createKb","code","message","success","i18n","concat","invalidateQueries","_x2","isPending","createKnowledge","mutateAsync","useDeleteKnowledge","_mutationFn2","_useMutation2","_callee5","_data$data4","_yield$kbService$rmKb","_context5","rmKb","_x3","deleteKnowledge","useUpdateKnowledge","_mutationFn3","_useMutation3","_callee6","_yield$kbService$upda","_yield$kbService$upda2","_context6","updateKb","_objectSpread","_x4","saveKnowledgeConfiguration","useTestChunkRetrieval","_mutationFn4","_useSetPaginationPara","useSetPaginationParams","pageSize","size","_useMutation4","_callee7","values","_values$kb_id","_data$data5","_yield$kbService$retr","res","_context7","retrieval_test","documents","doc_aggs","chunks","_x5","testChunk","useChunkIsTesting","useIsMutating","useSelectTestingResult","_data$at","useMutationState","filters","select","mutation","state","at","useSelectIsTestingSuccess","useFetchTagList","_queryFn4","_useQuery3","_callee8","_yield$listTag","_context8","listTag","useDeleteTag","_mutationFn5","_useMutation5","_callee9","tags","_data$data6","_yield$removeTag","_context9","removeTag","_x6","deleteTag","useRenameTag","_mutationFn6","_useMutation6","_callee10","_data$data7","_yield$renameTag","_context10","renameTag","_x7","useTagIsRenaming","useFetchTagListByKnowledgeIds","_queryFn5","knowledgeIds","setKnowledgeIds","_useQuery4","enabled","_callee11","_yield$kbService$list","_context11","listTagByKnowledgeIds","kb_ids","join","useFetchKnowledgeGraph","_queryFn6","_useQuery5","graph","mind_map","_callee12","_yield$getKnowledgeGr","_context12","getKnowledgeGraph","useSetSelectedRecord","currentRecord","setCurrentRecord","setRecord","record","_useState3","_useState4","setSearchString","e","target","useChangeLanguage","saveSetting","useSaveSetting","lng","changeLanguage","LanguageTranslationMap","language","useGetPaginationWithRouter","setPaginationParams","onPageChange","pageNumber","setCurrentPagination","pagination","useMemo","showQuickJumper","showSizeChanger","current","pageSizeOptions","onChange","showTotal","setPagination","useFetchAppConf","_useState7","_useState8","appConf","setAppConf","fetchAppConf","axios","useEffect","useSendMessageWithSse","url","api","completeConversation","_useState9","_useState10","answer","setAnswer","_useState11","_useState12","done","setDone","timer","useRef","resetAnswer","clearTimeout","setTimeout","send","body","controller","_response$body","response","reader","_done","val","d","fetch","method","headers","Authorization","getAuthorization","JSON","stringify","signal","clone","json","pipeThrough","TextDecoderStream","EventSourceParserStream","getReader","read","parse","conversationId","conversation_id","warn","t1","t2","useSpeechWithSse","tts","_ref3","useHandleMessageInputChange","_useState13","_useState14","setValue","nextValue","replaceAll","useSelectDerivedMessages","_useState15","_useState16","derivedMessages","setDerivedMessages","ref","messages","scrollToBottom","_ref$current","scrollIntoView","behavior","useScrollToBottom","addNewestQuestion","pre","_toConsumableArray","buildMessageUuid","role","Assistant","addNewestAnswer","_pre$slice","slice","reference","prompt","audio_binary","omit","removeLatestMessage","_pre$slice2","removeMessageById","messageId","_pre$filter","removeMessagesAfterCurrentMessage","index","findIndex","_pre$slice3","nextMessages","latestMessage","useRegenerateMessage","_ref4","sendMessage","regenerateMessage","_ref5","uuid","useSelectItem","defaultId","_useState17","_useState18","selectedId","setSelectedId","handleItemClick","useFetchModelId","_tenantInfo$llm_id","tenantInfo","useFetchTenantInfo","llm_id","ChunkTokenNumMap","naive","knowledge_graph","useHandleChunkMethodSelectChange","form","setFieldValue","useResetFormOnCloseModal","_ref6","prevOpenRef","prevOpen","resetFields","SegmentIndex","useSegmentedPathName","useLocation","pathname","split","useSecondPathName","Second","useThirdPathName","Third","useGetKnowledgeSearchParams","currentQueryParameters","documentId","DocumentId","knowledgeId","KnowledgeId","useNavigateWithFromState","navigate","useNavigate","path","from","useNavigateToDataset","Dataset","_useSearchParams5","_useSearchParams6","queryParameters","setSearchParams","set","toString","Number","create_kb","update_kb","rm_kb","kb_list","get_document_list","document_change_status","document_rm","document_delete","document_create","document_change_parser","document_thumbnails","chunk_list","create_chunk","set_chunk","get_chunk","switch_chunk","rm_chunk","document_rename","document_run","document_upload","web_crawl","document_infos","upload_and_parse","methods","setMeta","registerServer","request","post","fromTag","toTag","isConversationIdExist","buildMessageListWithUuid","_messages$map","getConversationId","replace","buildMessageUuidWithRole","preprocessLaTeX","_","equation","webpackEmptyAsyncContext","req","then","Error","keys","module","exports"],"sourceRoot":""}