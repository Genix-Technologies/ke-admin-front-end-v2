{"version":3,"file":"p__file-manager__index.91342871.async.js","mappings":"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","sources":["webpack:///./src/components/file-upload-modal/index.less?4e00","webpack:///./src/components/file-upload-modal/index.tsx","webpack:///./src/components/new-document-link.tsx","webpack:///./src/components/rename-modal/index.tsx","webpack:///./src/pages/file-manager/hooks.ts","webpack:///./src/pages/file-manager/action-cell/index.tsx","webpack:///./src/pages/file-manager/index.less?4007","webpack:///./src/pages/file-manager/file-toolbar.tsx","webpack:///./src/pages/file-manager/connect-to-knowledge-modal/index.tsx","webpack:///./src/pages/file-manager/folder-create-modal/index.tsx","webpack:///./src/pages/file-manager/move-file-modal/async-tree-select.tsx","webpack:///./src/pages/file-manager/move-file-modal/index.tsx","webpack:///./src/pages/file-manager/index.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"uploader\":\"uploader___ezBcw\",\"uploadLimit\":\"uploadLimit___bpygu\"};","import { useTranslate } from '@/hooks/common-hooks';\nimport { IModalProps } from '@/interfaces/common';\nimport { InboxOutlined } from '@ant-design/icons';\nimport {\n  Flex,\n  Modal,\n  Segmented,\n  Tabs,\n  TabsProps,\n  Upload,\n  UploadFile,\n  UploadProps,\n} from 'antd';\nimport { Dispatch, SetStateAction, useState } from 'react';\n\nimport styles from './index.less';\n\nconst { Dragger } = Upload;\n\nconst FileUpload = ({\n  directory,\n  fileList,\n  setFileList,\n}: {\n  directory: boolean;\n  fileList: UploadFile[];\n  setFileList: Dispatch<SetStateAction<UploadFile[]>>;\n}) => {\n  const { t } = useTranslate('fileManager');\n  const props: UploadProps = {\n    multiple: true,\n    onRemove: (file) => {\n      const index = fileList.indexOf(file);\n      const newFileList = fileList.slice();\n      newFileList.splice(index, 1);\n      setFileList(newFileList);\n    },\n    beforeUpload: (file) => {\n      setFileList((pre) => {\n        return [...pre, file];\n      });\n\n      return false;\n    },\n    directory,\n    fileList,\n  };\n\n  return (\n    <Dragger {...props} className={styles.uploader}>\n      <p className=\"ant-upload-drag-icon\">\n        <InboxOutlined />\n      </p>\n      <p className=\"ant-upload-text\">{t('uploadTitle')}</p>\n      <p className=\"ant-upload-hint\">{t('uploadDescription')}</p>\n      {false && <p className={styles.uploadLimit}>{t('uploadLimit')}</p>}\n    </Dragger>\n  );\n};\n\nconst FileUploadModal = ({\n  visible,\n  hideModal,\n  loading,\n  onOk: onFileUploadOk,\n}: IModalProps<UploadFile[]>) => {\n  const { t } = useTranslate('fileManager');\n  const [value, setValue] = useState<string | number>('local');\n  const [fileList, setFileList] = useState<UploadFile[]>([]);\n  const [directoryFileList, setDirectoryFileList] = useState<UploadFile[]>([]);\n\n  const clearFileList = () => {\n    setFileList([]);\n    setDirectoryFileList([]);\n  };\n\n  const onOk = async () => {\n    const ret = await onFileUploadOk?.([...fileList, ...directoryFileList]);\n    return ret;\n  };\n\n  const afterClose = () => {\n    clearFileList();\n  };\n\n  const items: TabsProps['items'] = [\n    {\n      key: '1',\n      label: t('file'),\n      children: (\n        <FileUpload\n          directory={false}\n          fileList={fileList}\n          setFileList={setFileList}\n        ></FileUpload>\n      ),\n    }\n    /*,\n    {\n      key: '2',\n      label: t('directory'),\n      children: (\n        <FileUpload\n          directory\n          fileList={directoryFileList}\n          setFileList={setDirectoryFileList}\n        ></FileUpload>\n      ),\n    },*/\n  ];\n\n  return (\n    <>\n      <Modal\n        title={t('uploadFile')}\n        open={visible}\n        onOk={onOk}\n        onCancel={hideModal}\n        confirmLoading={loading}\n        afterClose={afterClose}\n      >\n        <Flex gap={'large'} vertical>\n          {/*<Segmented\n            options={[\n              { label: t('local'), value: 'local' },\n              { label: t('s3'), value: 's3' },\n            ]}\n            block\n            value={value}\n            onChange={setValue}\n          />*/}\n          {value === 'local' ? (\n            <Tabs defaultActiveKey=\"1\" items={items} />\n          ) : (\n            t('comingSoon', { keyPrefix: 'common' })\n          )}\n        </Flex>\n      </Modal>\n    </>\n  );\n};\n\nexport default FileUploadModal;\n","import {\n  getExtension,\n  isSupportedPreviewDocumentType,\n} from '@/utils/document-util';\nimport React from 'react';\n\ninterface IProps extends React.PropsWithChildren {\n  link?: string;\n  preventDefault?: boolean;\n  color?: string;\n  documentName: string;\n  documentId?: string;\n  prefix?: string;\n}\n\nconst NewDocumentLink = ({\n  children,\n  link,\n  preventDefault = false,\n  color = 'rgb(15, 79, 170)',\n  documentId,\n  documentName,\n  prefix = 'file',\n}: IProps) => {\n  let nextLink = link;\n  const extension = getExtension(documentName);\n  if (!link) {\n    nextLink = `/document/${documentId}?ext=${extension}&prefix=${prefix}`;\n  }\n\n  return (\n    <a\n      target=\"_blank\"\n      onClick={\n        !preventDefault || isSupportedPreviewDocumentType(extension)\n          ? undefined\n          : (e) => e.preventDefault()\n      }\n      href={nextLink}\n      rel=\"noreferrer\"\n      style={{ color, wordBreak: 'break-all' }}\n    >\n      {children}\n    </a>\n  );\n};\n\nexport default NewDocumentLink;\n","import { useTranslate } from '@/hooks/common-hooks';\nimport { Form, Input, Modal } from 'antd';\nimport { useEffect } from 'react';\nimport { IModalManagerChildrenProps } from '../modal-manager';\n\ninterface IProps extends Omit<IModalManagerChildrenProps, 'showModal'> {\n  loading: boolean;\n  initialName: string;\n  onOk: (name: string) => void;\n  showModal?(): void;\n}\n\nconst RenameModal = ({\n  visible,\n  hideModal,\n  loading,\n  initialName,\n  onOk,\n}: IProps) => {\n  const [form] = Form.useForm();\n  const { t } = useTranslate('common');\n\n  type FieldType = {\n    name?: string;\n  };\n\n  const handleOk = async () => {\n    const ret = await form.validateFields();\n\n    return onOk(ret.name);\n  };\n\n  const handleCancel = () => {\n    hideModal();\n  };\n\n  const onFinish = (values: any) => {\n    console.log('Success:', values);\n  };\n\n  const onFinishFailed = (errorInfo: any) => {\n    console.log('Failed:', errorInfo);\n  };\n\n  useEffect(() => {\n    if (visible) {\n      form.setFieldValue('name', initialName);\n    }\n  }, [initialName, form, visible]);\n\n  return (\n    <Modal\n      title={t('rename')}\n      open={visible}\n      onOk={handleOk}\n      onCancel={handleCancel}\n      okButtonProps={{ loading }}\n      confirmLoading={loading}\n    >\n      <Form\n        name=\"basic\"\n        labelCol={{ span: 4 }}\n        wrapperCol={{ span: 20 }}\n        style={{ maxWidth: 600 }}\n        onFinish={onFinish}\n        onFinishFailed={onFinishFailed}\n        autoComplete=\"off\"\n        form={form}\n      >\n        <Form.Item<FieldType>\n          label={t('name')}\n          name=\"name\"\n          rules={[{ required: true, message: t('namePlaceholder') }]}\n        >\n          <Input />\n        </Form.Item>\n      </Form>\n    </Modal>\n  );\n};\n\nexport default RenameModal;\n","import { useSetModalState, useShowDeleteConfirm } from '@/hooks/common-hooks';\nimport {\n  useConnectToKnowledge,\n  useCreateFolder,\n  useDeleteFile,\n  useFetchParentFolderList,\n  useMoveFile,\n  useRenameFile,\n  useUploadFile,\n} from '@/hooks/file-manager-hooks';\nimport { IFile } from '@/interfaces/database/file-manager';\nimport { TableRowSelection } from 'antd/es/table/interface';\nimport { UploadFile } from 'antd/lib';\nimport { useCallback, useMemo, useState } from 'react';\nimport { useNavigate, useSearchParams } from 'umi';\n\nexport const useGetFolderId = () => {\n  const [searchParams] = useSearchParams();\n  const id = searchParams.get('folderId') as string;\n\n  return id ?? '';\n};\n\nexport const useGetRowSelection = () => {\n  const [selectedRowKeys, setSelectedRowKeys] = useState<React.Key[]>([]);\n\n  const rowSelection: TableRowSelection<IFile> = {\n    selectedRowKeys,\n    getCheckboxProps: (record) => {\n      return { disabled: record.source_type === 'knowledgebase' };\n    },\n    onChange: (newSelectedRowKeys: React.Key[]) => {\n      setSelectedRowKeys(newSelectedRowKeys);\n    },\n  };\n\n  return { rowSelection, setSelectedRowKeys };\n};\n\nexport const useNavigateToOtherFolder = () => {\n  const navigate = useNavigate();\n  const navigateToOtherFolder = useCallback(\n    (folderId: string) => {\n      navigate(`/file?folderId=${folderId}`);\n    },\n    [navigate],\n  );\n\n  return navigateToOtherFolder;\n};\n\nexport const useRenameCurrentFile = () => {\n  const [file, setFile] = useState<IFile>({} as IFile);\n  const {\n    visible: fileRenameVisible,\n    hideModal: hideFileRenameModal,\n    showModal: showFileRenameModal,\n  } = useSetModalState();\n  const { renameFile, loading } = useRenameFile();\n\n  const onFileRenameOk = useCallback(\n    async (name: string) => {\n      const ret = await renameFile({\n        fileId: file.id,\n        name,\n      });\n\n      if (ret === 0) {\n        hideFileRenameModal();\n      }\n    },\n    [renameFile, file, hideFileRenameModal],\n  );\n\n  const handleShowFileRenameModal = useCallback(\n    async (record: IFile) => {\n      setFile(record);\n      showFileRenameModal();\n    },\n    [showFileRenameModal],\n  );\n\n  return {\n    fileRenameLoading: loading,\n    initialFileName: file.name,\n    onFileRenameOk,\n    fileRenameVisible,\n    hideFileRenameModal,\n    showFileRenameModal: handleShowFileRenameModal,\n  };\n};\n\nexport const useSelectBreadcrumbItems = () => {\n  const parentFolderList = useFetchParentFolderList();\n\n  return parentFolderList.length === 1\n    ? []\n    : parentFolderList.map((x) => ({\n        title: x.name === '/' ? 'root' : x.name,\n        path: `/file?folderId=${x.id}`,\n      }));\n};\n\nexport const useHandleCreateFolder = () => {\n  const {\n    visible: folderCreateModalVisible,\n    hideModal: hideFolderCreateModal,\n    showModal: showFolderCreateModal,\n  } = useSetModalState();\n  const { createFolder, loading } = useCreateFolder();\n  const id = useGetFolderId();\n\n  const onFolderCreateOk = useCallback(\n    async (name: string) => {\n      const ret = await createFolder({ parentId: id, name });\n\n      if (ret === 0) {\n        hideFolderCreateModal();\n      }\n    },\n    [createFolder, hideFolderCreateModal, id],\n  );\n\n  return {\n    folderCreateLoading: loading,\n    onFolderCreateOk,\n    folderCreateModalVisible,\n    hideFolderCreateModal,\n    showFolderCreateModal,\n  };\n};\n\nexport const useHandleDeleteFile = (\n  fileIds: string[],\n  setSelectedRowKeys: (keys: string[]) => void,\n) => {\n  const { deleteFile: removeDocument } = useDeleteFile();\n  const showDeleteConfirm = useShowDeleteConfirm();\n  const parentId = useGetFolderId();\n\n  const handleRemoveFile = () => {\n    showDeleteConfirm({\n      onOk: async () => {\n        const code = await removeDocument({ fileIds, parentId });\n        if (code === 0) {\n          setSelectedRowKeys([]);\n        }\n        return;\n      },\n    });\n  };\n\n  return { handleRemoveFile };\n};\n\nexport const useHandleUploadFile = () => {\n  const {\n    visible: fileUploadVisible,\n    hideModal: hideFileUploadModal,\n    showModal: showFileUploadModal,\n  } = useSetModalState();\n  const { uploadFile, loading } = useUploadFile();\n  const id = useGetFolderId();\n\n  const onFileUploadOk = useCallback(\n    async (fileList: UploadFile[]): Promise<number | undefined> => {\n      if (fileList.length > 0) {\n        const ret: number = await uploadFile({ fileList, parentId: id });\n        if (ret === 0) {\n          hideFileUploadModal();\n        }\n        return ret;\n      }\n    },\n    [uploadFile, hideFileUploadModal, id],\n  );\n\n  return {\n    fileUploadLoading: loading,\n    onFileUploadOk,\n    fileUploadVisible,\n    hideFileUploadModal,\n    showFileUploadModal,\n  };\n};\n\nexport const useHandleConnectToKnowledge = () => {\n  const {\n    visible: connectToKnowledgeVisible,\n    hideModal: hideConnectToKnowledgeModal,\n    showModal: showConnectToKnowledgeModal,\n  } = useSetModalState();\n  const { connectFileToKnowledge: connectToKnowledge, loading } =\n    useConnectToKnowledge();\n  const [record, setRecord] = useState<IFile>({} as IFile);\n\n  const initialValue = useMemo(() => {\n    return Array.isArray(record?.kbs_info)\n      ? record?.kbs_info?.map((x) => x.kb_id)\n      : [];\n  }, [record?.kbs_info]);\n\n  const onConnectToKnowledgeOk = useCallback(\n    async (knowledgeIds: string[]) => {\n      const ret = await connectToKnowledge({\n        fileIds: [record.id],\n        kbIds: knowledgeIds,\n      });\n\n      if (ret === 0) {\n        hideConnectToKnowledgeModal();\n      }\n      return ret;\n    },\n    [connectToKnowledge, hideConnectToKnowledgeModal, record.id],\n  );\n\n  const handleShowConnectToKnowledgeModal = useCallback(\n    (record: IFile) => {\n      setRecord(record);\n      showConnectToKnowledgeModal();\n    },\n    [showConnectToKnowledgeModal],\n  );\n\n  return {\n    initialValue,\n    connectToKnowledgeLoading: loading,\n    onConnectToKnowledgeOk,\n    connectToKnowledgeVisible,\n    hideConnectToKnowledgeModal,\n    showConnectToKnowledgeModal: handleShowConnectToKnowledgeModal,\n  };\n};\n\nexport const useHandleBreadcrumbClick = () => {\n  const navigate = useNavigate();\n\n  const handleBreadcrumbClick = useCallback(\n    (path?: string) => {\n      if (path) {\n        navigate(path);\n      }\n    },\n    [navigate],\n  );\n\n  return { handleBreadcrumbClick };\n};\n\nexport const useHandleMoveFile = (\n  setSelectedRowKeys: (keys: string[]) => void,\n) => {\n  const {\n    visible: moveFileVisible,\n    hideModal: hideMoveFileModal,\n    showModal: showMoveFileModal,\n  } = useSetModalState();\n  const { moveFile, loading } = useMoveFile();\n  const [sourceFileIds, setSourceFileIds] = useState<string[]>([]);\n\n  const onMoveFileOk = useCallback(\n    async (targetFolderId: string) => {\n      const ret = await moveFile({\n        src_file_ids: sourceFileIds,\n        dest_file_id: targetFolderId,\n      });\n\n      if (ret === 0) {\n        setSelectedRowKeys([]);\n        hideMoveFileModal();\n      }\n      return ret;\n    },\n    [moveFile, hideMoveFileModal, sourceFileIds, setSelectedRowKeys],\n  );\n\n  const handleShowMoveFileModal = useCallback(\n    (ids: string[]) => {\n      setSourceFileIds(ids);\n      showMoveFileModal();\n    },\n    [showMoveFileModal],\n  );\n\n  return {\n    initialValue: '',\n    moveFileLoading: loading,\n    onMoveFileOk,\n    moveFileVisible,\n    hideMoveFileModal,\n    showMoveFileModal: handleShowMoveFileModal,\n  };\n};\n","import NewDocumentLink from '@/components/new-document-link';\nimport { useTranslate } from '@/hooks/common-hooks';\nimport { useDownloadFile } from '@/hooks/file-manager-hooks';\nimport { IFile } from '@/interfaces/database/file-manager';\nimport {\n  getExtension,\n  isSupportedPreviewDocumentType,\n} from '@/utils/document-util';\nimport {\n  DownloadOutlined,\n  EditOutlined,\n  EyeOutlined,\n  LinkOutlined,\n} from '@ant-design/icons';\nimport { Button, Space, Tooltip } from 'antd';\nimport { FolderInput, Trash2 } from 'lucide-react';\nimport { useHandleDeleteFile } from '../hooks';\n\ninterface IProps {\n  record: IFile;\n  setCurrentRecord: (record: any) => void;\n  showRenameModal: (record: IFile) => void;\n  showMoveFileModal: (ids: string[]) => void;\n  showConnectToKnowledgeModal: (record: IFile) => void;\n  setSelectedRowKeys(keys: string[]): void;\n}\n\nconst ActionCell = ({\n  record,\n  setCurrentRecord,\n  showRenameModal,\n  showConnectToKnowledgeModal,\n  setSelectedRowKeys,\n  showMoveFileModal,\n}: IProps) => {\n  const documentId = record.id;\n  const beingUsed = false;\n  const { t } = useTranslate('fileManager');\n  const { handleRemoveFile } = useHandleDeleteFile(\n    [documentId],\n    setSelectedRowKeys,\n  );\n  const { downloadFile, loading } = useDownloadFile();\n  const extension = getExtension(record.name);\n  const isKnowledgeBase = record.source_type === 'knowledgebase';\n\n  const onDownloadDocument = () => {\n    downloadFile({\n      id: documentId,\n      filename: record.name,\n    });\n  };\n\n  const setRecord = () => {\n    setCurrentRecord(record);\n  };\n\n  const onShowRenameModal = () => {\n    setRecord();\n    showRenameModal(record);\n  };\n\n  const onShowConnectToKnowledgeModal = () => {\n    showConnectToKnowledgeModal(record);\n  };\n\n  const onShowMoveFileModal = () => {\n    showMoveFileModal([documentId]);\n  };\n\n  return (\n    <Space size={0}>\n      {/*isKnowledgeBase || () */}\n      {\n        <Tooltip title={t('addToKnowledge')}>\n          <Button type=\"text\" onClick={onShowConnectToKnowledgeModal}>\n            <LinkOutlined size={20} />\n          </Button>\n        </Tooltip>\n      }\n      {/*isKnowledgeBase || () */}\n      {\n        <Tooltip title={t('rename', { keyPrefix: 'common' })}>\n          <Button type=\"text\" disabled={beingUsed} onClick={onShowRenameModal}>\n            <EditOutlined size={20} />\n          </Button>\n        </Tooltip>\n      }\n      {/*isKnowledgeBase || (\n        <Tooltip title={t('move', { keyPrefix: 'common' })}>\n          <Button\n            type=\"text\"\n            disabled={beingUsed}\n            onClick={onShowMoveFileModal}\n            className=\"flex items-end\"\n          >\n            <FolderInput className=\"size-4\" />\n          </Button>\n        </Tooltip>\n      )*/}\n      {/* isKnowledgeBase || ()*/}\n      {\n        <Tooltip title={t('delete', { keyPrefix: 'common' })}>\n          <Button\n            type=\"text\"\n            disabled={beingUsed}\n            onClick={handleRemoveFile}\n            className=\"flex items-end\"\n          >\n            <Trash2 className=\"size-4\" />\n          </Button>\n        </Tooltip>\n      }\n      {record.type !== 'folder' && (\n        <Tooltip title={t('download', { keyPrefix: 'common' })}>\n          <Button\n            type=\"text\"\n            disabled={beingUsed}\n            loading={loading}\n            onClick={onDownloadDocument}\n          >\n            <DownloadOutlined size={20} />\n          </Button>\n        </Tooltip>\n      )}\n      {isSupportedPreviewDocumentType(extension) && (\n        <NewDocumentLink\n          documentId={documentId}\n          documentName={record.name}\n          color=\"black\"\n        >\n          <Tooltip title={t('preview')}>\n            <Button type=\"text\">\n              <EyeOutlined size={20} />\n            </Button>\n          </Tooltip>\n        </NewDocumentLink>\n      )}\n    </Space>\n  );\n};\n\nexport default ActionCell;\n","// extracted by mini-css-extract-plugin\nexport default {\"fileManagerWrapper\":\"fileManagerWrapper___R9Ujv\",\"filter\":\"filter___x1Xt2\",\"deleteIconWrapper\":\"deleteIconWrapper___pgIrY\",\"linkButton\":\"linkButton___Dw8Oi\",\"breadcrumbItemButton\":\"breadcrumbItemButton___qWlv3\"};","import { useTranslate } from '@/hooks/common-hooks';\nimport {\n  IListResult,\n  useFetchParentFolderList,\n} from '@/hooks/file-manager-hooks';\nimport {\n  DownOutlined,\n  FileTextOutlined,\n  FolderOpenOutlined,\n  PlusOutlined,\n  SearchOutlined,\n} from '@ant-design/icons';\nimport {\n  Breadcrumb,\n  BreadcrumbProps,\n  Button,\n  Dropdown,\n  Flex,\n  Input,\n  MenuProps,\n  Space,\n} from 'antd';\nimport { useCallback, useMemo } from 'react';\nimport {\n  useHandleBreadcrumbClick,\n  useHandleDeleteFile,\n  useSelectBreadcrumbItems,\n} from './hooks';\n\nimport { FolderInput, Trash2 } from 'lucide-react';\nimport styles from './index.less';\n\ninterface IProps\n  extends Pick<IListResult, 'searchString' | 'handleInputChange'> {\n  selectedRowKeys: string[];\n  showFolderCreateModal: () => void;\n  showFileUploadModal: () => void;\n  setSelectedRowKeys: (keys: string[]) => void;\n  showMoveFileModal: (ids: string[]) => void;\n}\n\nconst FileToolbar = ({\n  selectedRowKeys,\n  showFolderCreateModal,\n  showFileUploadModal,\n  setSelectedRowKeys,\n  searchString,\n  handleInputChange,\n  showMoveFileModal,\n}: IProps) => {\n  const { t } = useTranslate('knowledgeDetails');\n  const breadcrumbItems = useSelectBreadcrumbItems();\n  const { handleBreadcrumbClick } = useHandleBreadcrumbClick();\n  const parentFolderList = useFetchParentFolderList();\n  const isKnowledgeBase =\n    parentFolderList.at(-1)?.source_type === 'knowledgebase';\n\n  const itemRender: BreadcrumbProps['itemRender'] = (\n    currentRoute,\n    params,\n    items,\n  ) => {\n    const isLast = currentRoute?.path === items[items.length - 1]?.path;\n\n    return isLast ? (\n      <span>{currentRoute.title}</span>\n    ) : (\n      <span\n        className={styles.breadcrumbItemButton}\n        onClick={() => handleBreadcrumbClick(currentRoute.path)}\n      >\n        {currentRoute.title}\n      </span>\n    );\n  };\n\n  const actionItems: MenuProps['items'] = useMemo(() => {\n    return [\n      {\n        key: '1',\n        onClick: showFileUploadModal,\n        label: (\n          <div>\n            <Button type=\"link\">\n              <Space>\n                <FileTextOutlined />\n                {t('uploadFile', { keyPrefix: 'fileManager' })}\n              </Space>\n            </Button>\n          </div>\n        ),\n      }\n      /*  \n      { type: 'divider' },\n      {\n        key: '2',\n        onClick: showFolderCreateModal,\n        label: (\n          <div>\n            <Button type=\"link\">\n              <Space>\n                <FolderOpenOutlined />\n                {t('newFolder', { keyPrefix: 'fileManager' })}\n              </Space>\n            </Button>\n          </div>\n        ),\n      }, */,\n    ];\n  }, [t, showFolderCreateModal, showFileUploadModal]);\n\n  const { handleRemoveFile } = useHandleDeleteFile(\n    selectedRowKeys,\n    setSelectedRowKeys,\n  );\n\n  const handleShowMoveFileModal = useCallback(() => {\n    showMoveFileModal(selectedRowKeys);\n  }, [selectedRowKeys, showMoveFileModal]);\n\n  const disabled = selectedRowKeys.length === 0;\n\n  const items: MenuProps['items'] = useMemo(() => {\n    return [\n      {\n        key: '4',\n        onClick: handleRemoveFile,\n        label: (\n          <Flex gap={10}>\n            <span className=\"flex items-center justify-center\">\n              <Trash2 className=\"size-4\" />\n            </span>\n            <b>{t('delete', { keyPrefix: 'common' })}</b>\n          </Flex>\n        ),\n      }\n      /*,\n      {\n        key: '5',\n        onClick: handleShowMoveFileModal,\n        label: (\n          <Flex gap={10}>\n            <span className=\"flex items-center justify-center\">\n              <FolderInput className=\"size-4\"></FolderInput>\n            </span>\n            <b>{t('move', { keyPrefix: 'common' })}</b>\n          </Flex>\n        ),\n      },*/\n    ];\n  }, [handleShowMoveFileModal, t, handleRemoveFile]);\n\n  return (\n    <div className={styles.filter}>\n      <Breadcrumb items={breadcrumbItems} itemRender={itemRender} />\n      <Space>\n        {isKnowledgeBase || (\n          <Dropdown\n            menu={{ items }}\n            placement=\"bottom\"\n            arrow={false}\n            disabled={disabled}\n          >\n            <Button>\n              <Space>\n                <b> {t('bulk')}</b>\n                <DownOutlined />\n              </Space>\n            </Button>\n          </Dropdown>\n        )}\n        <Input\n          placeholder={t('searchFiles')}\n          value={searchString}\n          style={{ width: 220 }}\n          allowClear\n          onChange={handleInputChange}\n          prefix={<SearchOutlined />}\n        />\n\n        {isKnowledgeBase || (\n          <Dropdown menu={{ items: actionItems }} trigger={['click']}>\n            <Button type=\"primary\" icon={<PlusOutlined />}>\n              {t('addFile')}\n            </Button>\n          </Dropdown>\n        )}\n      </Space>\n    </div>\n  );\n};\n\nexport default FileToolbar;\n","import { useTranslate } from '@/hooks/common-hooks';\nimport { useFetchKnowledgeList } from '@/hooks/knowledge-hooks';\nimport { IModalProps } from '@/interfaces/common';\nimport { filterOptionsByInput } from '@/utils/common-util';\nimport { Form, Modal, Select } from 'antd';\nimport { useEffect } from 'react';\n\nconst ConnectToKnowledgeModal = ({\n  visible,\n  hideModal,\n  onOk,\n  initialValue,\n  loading,\n}: IModalProps<string[]> & { initialValue: string[] }) => {\n  const [form] = Form.useForm();\n  const { list } = useFetchKnowledgeList();\n  const { t } = useTranslate('fileManager');\n\n  const options = list?.map((item) => ({\n    label: item.name,\n    value: item.id,\n  }));\n\n  const handleOk = async () => {\n    const values = await form.getFieldsValue();\n    const knowledgeIds = values.knowledgeIds ?? [];\n    return onOk?.(knowledgeIds);\n  };\n\n  useEffect(() => {\n    if (visible) {\n      form.setFieldValue('knowledgeIds', initialValue);\n    }\n  }, [visible, initialValue, form]);\n\n  return (\n    <Modal\n      title={t('addToKnowledge')}\n      open={visible}\n      onOk={handleOk}\n      onCancel={hideModal}\n      confirmLoading={loading}\n    >\n      <Form form={form}>\n        <Form.Item name=\"knowledgeIds\" noStyle>\n          <Select\n            mode=\"multiple\"\n            allowClear\n            showSearch\n            style={{ width: '100%' }}\n            placeholder={t('pleaseSelect')}\n            options={options}\n            optionFilterProp=\"children\"\n            filterOption={filterOptionsByInput}\n          />\n        </Form.Item>\n      </Form>\n    </Modal>\n  );\n};\n\nexport default ConnectToKnowledgeModal;\n","import { IModalManagerChildrenProps } from '@/components/modal-manager';\nimport { useTranslate } from '@/hooks/common-hooks';\nimport { Form, Input, Modal } from 'antd';\n\ninterface IProps extends Omit<IModalManagerChildrenProps, 'showModal'> {\n  loading: boolean;\n  onOk: (name: string) => void;\n}\n\nconst FolderCreateModal = ({ visible, hideModal, loading, onOk }: IProps) => {\n  const [form] = Form.useForm();\n  const { t } = useTranslate('common');\n\n  type FieldType = {\n    name?: string;\n  };\n\n  const handleOk = async () => {\n    const ret = await form.validateFields();\n\n    return onOk(ret.name);\n  };\n\n  return (\n    <Modal\n      title={t('newFolder', { keyPrefix: 'fileManager' })}\n      open={visible}\n      onOk={handleOk}\n      onCancel={hideModal}\n      okButtonProps={{ loading }}\n      confirmLoading={loading}\n    >\n      <Form\n        name=\"basic\"\n        labelCol={{ span: 4 }}\n        wrapperCol={{ span: 20 }}\n        style={{ maxWidth: 600 }}\n        autoComplete=\"off\"\n        form={form}\n      >\n        <Form.Item<FieldType>\n          label={t('name')}\n          name=\"name\"\n          rules={[{ required: true, message: t('namePlaceholder') }]}\n        >\n          <Input />\n        </Form.Item>\n      </Form>\n    </Modal>\n  );\n};\n\nexport default FolderCreateModal;\n","import { useFetchPureFileList } from '@/hooks/file-manager-hooks';\nimport { IFile } from '@/interfaces/database/file-manager';\nimport type { GetProp, TreeSelectProps } from 'antd';\nimport { TreeSelect } from 'antd';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\ntype DefaultOptionType = GetProp<TreeSelectProps, 'treeData'>[number];\n\ninterface IProps {\n  value?: string;\n  onChange?: (value: string) => void;\n}\n\nconst AsyncTreeSelect = ({ value, onChange }: IProps) => {\n  const { t } = useTranslation();\n  const { fetchList } = useFetchPureFileList();\n  const [treeData, setTreeData] = useState<Omit<DefaultOptionType, 'label'>[]>(\n    [],\n  );\n\n  const onLoadData: TreeSelectProps['loadData'] = useCallback(\n    async ({ id }) => {\n      const ret = await fetchList(id);\n      if (ret.code === 0) {\n        setTreeData((tree) => {\n          return tree.concat(\n            ret.data.files\n              .filter((x: IFile) => x.type === 'folder')\n              .map((x: IFile) => ({\n                id: x.id,\n                pId: x.parent_id,\n                value: x.id,\n                title: x.name,\n                isLeaf:\n                  typeof x.has_child_folder === 'boolean'\n                    ? !x.has_child_folder\n                    : false,\n              })),\n          );\n        });\n      }\n    },\n    [fetchList],\n  );\n\n  const handleChange = (newValue: string) => {\n    onChange?.(newValue);\n  };\n\n  useEffect(() => {\n    onLoadData?.({ id: '', props: '' });\n  }, [onLoadData]);\n\n  return (\n    <TreeSelect\n      treeDataSimpleMode\n      style={{ width: '100%' }}\n      value={value}\n      dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\n      placeholder={t('fileManager.pleaseSelect')}\n      onChange={handleChange}\n      loadData={onLoadData}\n      treeData={treeData}\n    />\n  );\n};\n\nexport default AsyncTreeSelect;\n","import { IModalManagerChildrenProps } from '@/components/modal-manager';\nimport { useTranslate } from '@/hooks/common-hooks';\nimport { Form, Modal } from 'antd';\nimport AsyncTreeSelect from './async-tree-select';\n\ninterface IProps extends Omit<IModalManagerChildrenProps, 'showModal'> {\n  loading: boolean;\n  onOk: (id: string) => void;\n}\n\nconst FileMovingModal = ({ visible, hideModal, loading, onOk }: IProps) => {\n  const [form] = Form.useForm();\n  const { t } = useTranslate('fileManager');\n\n  type FieldType = {\n    name?: string;\n  };\n\n  const handleOk = async () => {\n    const ret = await form.validateFields();\n\n    return onOk(ret.name);\n  };\n\n  return (\n    <Modal\n      title={t('move', { keyPrefix: 'common' })}\n      open={visible}\n      onOk={handleOk}\n      onCancel={hideModal}\n      okButtonProps={{ loading }}\n      confirmLoading={loading}\n      width={600}\n    >\n      <Form\n        name=\"basic\"\n        labelCol={{ span: 6 }}\n        wrapperCol={{ span: 18 }}\n        autoComplete=\"off\"\n        form={form}\n      >\n        <Form.Item<FieldType>\n          label={t('destinationFolder')}\n          name=\"name\"\n          rules={[{ required: true, message: t('pleaseSelect') }]}\n        >\n          <AsyncTreeSelect></AsyncTreeSelect>\n        </Form.Item>\n      </Form>\n    </Modal>\n  );\n};\n\nexport default FileMovingModal;\n","import { useFetchFileList } from '@/hooks/file-manager-hooks';\nimport { IFile } from '@/interfaces/database/file-manager';\nimport { formatDate } from '@/utils/date';\nimport { Button, Flex, Space, Table, Tag, Typography } from 'antd';\nimport { ColumnsType } from 'antd/es/table';\nimport ActionCell from './action-cell';\nimport FileToolbar from './file-toolbar';\nimport {\n  useGetRowSelection,\n  useHandleConnectToKnowledge,\n  useHandleCreateFolder,\n  useHandleMoveFile,\n  useHandleUploadFile,\n  useNavigateToOtherFolder,\n  useRenameCurrentFile,\n} from './hooks';\n\nimport FileUploadModal from '@/components/file-upload-modal';\nimport RenameModal from '@/components/rename-modal';\nimport SvgIcon from '@/components/svg-icon';\nimport { useTranslate } from '@/hooks/common-hooks';\nimport { formatNumberWithThousandsSeparator } from '@/utils/common-util';\nimport { getExtension } from '@/utils/document-util';\nimport ConnectToKnowledgeModal from './connect-to-knowledge-modal';\nimport FolderCreateModal from './folder-create-modal';\nimport styles from './index.less';\nimport FileMovingModal from './move-file-modal';\n\nconst { Text } = Typography;\n\nconst FileManager = () => {\n  const { t } = useTranslate('fileManager');\n  // const fileList = useSelectFileList();\n  const { rowSelection, setSelectedRowKeys } = useGetRowSelection();\n  const navigateToOtherFolder = useNavigateToOtherFolder();\n  const {\n    fileRenameVisible,\n    fileRenameLoading,\n    hideFileRenameModal,\n    showFileRenameModal,\n    initialFileName,\n    onFileRenameOk,\n  } = useRenameCurrentFile();\n  const {\n    folderCreateModalVisible,\n    showFolderCreateModal,\n    hideFolderCreateModal,\n    folderCreateLoading,\n    onFolderCreateOk,\n  } = useHandleCreateFolder();\n  const {\n    fileUploadVisible,\n    hideFileUploadModal,\n    showFileUploadModal,\n    fileUploadLoading,\n    onFileUploadOk,\n  } = useHandleUploadFile();\n  const {\n    connectToKnowledgeVisible,\n    hideConnectToKnowledgeModal,\n    showConnectToKnowledgeModal,\n    onConnectToKnowledgeOk,\n    initialValue,\n    connectToKnowledgeLoading,\n  } = useHandleConnectToKnowledge();\n  const {\n    showMoveFileModal,\n    moveFileVisible,\n    onMoveFileOk,\n    hideMoveFileModal,\n    moveFileLoading,\n  } = useHandleMoveFile(setSelectedRowKeys);\n  const { pagination, data, searchString, handleInputChange, loading } =\n    useFetchFileList();\n  const columns: ColumnsType<IFile> = [\n    {\n      title: t('name'),\n      dataIndex: 'name',\n      key: 'name',\n      fixed: 'left',\n      render(value, record) {\n        return (\n          <Flex gap={10} align=\"center\">\n            <SvgIcon\n              name={`file-icon/${record.type === 'folder' ? 'folder' : getExtension(value)}`}\n              width={24}\n            ></SvgIcon>\n            {record.type === 'folder' ? (\n              <Button\n                type={'link'}\n                className={styles.linkButton}\n                onClick={() => navigateToOtherFolder(record.id)}\n              >\n                <Text ellipsis={{ tooltip: value }}>{value}</Text>\n              </Button>\n            ) : (\n              <Text ellipsis={{ tooltip: value }}>{value}</Text>\n            )}\n          </Flex>\n        );\n      },\n    },\n    {\n      title: t('uploadDate'),\n      dataIndex: 'create_time',\n      key: 'create_time',\n      render(text) {\n        return formatDate(text);\n      },\n    },\n    {\n      title: t('size'),\n      dataIndex: 'size',\n      key: 'size',\n      render(value) {\n        return (\n          formatNumberWithThousandsSeparator((value / 1024).toFixed(2)) + ' KB'\n        );\n      },\n    },\n    {\n      title: t('knowledgeBase'),\n      dataIndex: 'kbs_info',\n      key: 'kbs_info',\n      render(value) {\n        return Array.isArray(value) ? (\n          <Space wrap>\n            {value?.map((x) => (\n              <Tag color=\"blue\" key={x.kb_id}>\n                {x.kb_name}\n              </Tag>\n            ))}\n          </Space>\n        ) : (\n          ''\n        );\n      },\n    },\n    {\n      title: t('action'),\n      dataIndex: 'action',\n      key: 'action',\n      render: (text, record) => (\n        <ActionCell\n          record={record}\n          setCurrentRecord={(record: any) => {\n            console.info(record);\n          }}\n          showRenameModal={showFileRenameModal}\n          showMoveFileModal={showMoveFileModal}\n          showConnectToKnowledgeModal={showConnectToKnowledgeModal}\n          setSelectedRowKeys={setSelectedRowKeys}\n        ></ActionCell>\n      ),\n    },\n  ];\n\n  return (\n    <section className={styles.fileManagerWrapper}>\n      <FileToolbar\n        searchString={searchString}\n        handleInputChange={handleInputChange}\n        selectedRowKeys={rowSelection.selectedRowKeys as string[]}\n        showFolderCreateModal={showFolderCreateModal}\n        showFileUploadModal={showFileUploadModal}\n        setSelectedRowKeys={setSelectedRowKeys}\n        showMoveFileModal={showMoveFileModal}\n      ></FileToolbar>\n     \n      <Table\n        dataSource={data?.files}\n        columns={columns}\n        rowKey={'id'}\n        rowSelection={rowSelection}\n        loading={loading}\n        pagination={pagination}\n        scroll={{ scrollToFirstRowOnChange: true, x: '100%' }}\n      />\n      <RenameModal\n        visible={fileRenameVisible}\n        hideModal={hideFileRenameModal}\n        onOk={onFileRenameOk}\n        initialName={initialFileName}\n        loading={fileRenameLoading}\n      ></RenameModal>\n      <FolderCreateModal\n        loading={folderCreateLoading}\n        visible={folderCreateModalVisible}\n        hideModal={hideFolderCreateModal}\n        onOk={onFolderCreateOk}\n      ></FolderCreateModal>\n      <FileUploadModal\n        visible={fileUploadVisible}\n        hideModal={hideFileUploadModal}\n        loading={fileUploadLoading}\n        onOk={onFileUploadOk}\n      ></FileUploadModal>\n      <ConnectToKnowledgeModal\n        initialValue={initialValue}\n        visible={connectToKnowledgeVisible}\n        hideModal={hideConnectToKnowledgeModal}\n        onOk={onConnectToKnowledgeOk}\n        loading={connectToKnowledgeLoading}\n      ></ConnectToKnowledgeModal>\n      {moveFileVisible && (\n        <FileMovingModal\n          visible={moveFileVisible}\n          hideModal={hideMoveFileModal}\n          onOk={onMoveFileOk}\n          loading={moveFileLoading}\n        ></FileMovingModal>\n      )}\n    </section>\n  );\n};\n\nexport default FileManager;\n"],"names":["Dragger","Upload","FileUpload","_ref","directory","fileList","setFileList","t","useTranslate","props","multiple","onRemove","file","index","indexOf","newFileList","slice","splice","beforeUpload","pre","concat","_toConsumableArray","_jsxs","_objectSpread","className","styles","children","_jsx","InboxOutlined","_ref2","visible","hideModal","loading","onFileUploadOk","onOk","_useState","useState","_useState2","_slicedToArray","value","_useState3","_useState4","_useState5","_useState6","directoryFileList","setDirectoryFileList","_ref3","_asyncToGenerator","_regeneratorRuntime","mark","_callee","ret","wrap","_context","prev","next","sent","abrupt","stop","apply","arguments","items","key","label","_Fragment","Modal","title","open","onCancel","confirmLoading","afterClose","Flex","gap","vertical","Tabs","defaultActiveKey","keyPrefix","link","_ref$preventDefault","preventDefault","_ref$color","color","documentId","documentName","_ref$prefix","prefix","nextLink","extension","getExtension","target","onClick","isSupportedPreviewDocumentType","undefined","e","href","rel","style","wordBreak","initialName","_Form$useForm","Form","useForm","form","handleOk","validateFields","name","useEffect","setFieldValue","okButtonProps","labelCol","span","wrapperCol","maxWidth","onFinish","values","console","log","onFinishFailed","errorInfo","autoComplete","Item","rules","required","message","Input","useGetFolderId","_useSearchParams","useSearchParams","id","get","useHandleDeleteFile","fileIds","setSelectedRowKeys","removeDocument","useDeleteFile","deleteFile","showDeleteConfirm","useShowDeleteConfirm","parentId","handleRemoveFile","_onOk","_callee4","_context4","record","setCurrentRecord","showRenameModal","showConnectToKnowledgeModal","showMoveFileModal","beingUsed","_useDownloadFile","useDownloadFile","downloadFile","source_type","Space","size","Tooltip","Button","type","LinkOutlined","disabled","EditOutlined","Trash2","filename","DownloadOutlined","NewDocumentLink","EyeOutlined","_parentFolderList$at","navigate","selectedRowKeys","showFolderCreateModal","showFileUploadModal","searchString","handleInputChange","breadcrumbItems","parentFolderList","useFetchParentFolderList","length","map","x","path","useSelectBreadcrumbItems","handleBreadcrumbClick","useNavigate","useCallback","isKnowledgeBase","at","actionItems","useMemo","FileTextOutlined","handleShowMoveFileModal","Breadcrumb","itemRender","currentRoute","params","_items","Dropdown","menu","placement","arrow","DownOutlined","placeholder","width","allowClear","onChange","SearchOutlined","trigger","icon","PlusOutlined","initialValue","list","useFetchKnowledgeList","options","item","_values$knowledgeIds","knowledgeIds","getFieldsValue","noStyle","Select","mode","showSearch","optionFilterProp","filterOption","filterOptionsByInput","useTranslation","fetchList","useFetchPureFileList","treeData","setTreeData","onLoadData","code","tree","data","files","filter","pId","parent_id","isLeaf","has_child_folder","_x","TreeSelect","treeDataSimpleMode","dropdownStyle","maxHeight","overflow","newValue","loadData","AsyncTreeSelect","Text","Typography","_useGetRowSelection","rowSelection","getCheckboxProps","newSelectedRowKeys","useGetRowSelection","navigateToOtherFolder","folderId","_useRenameCurrentFile","setFile","_useSetModalState","useSetModalState","fileRenameVisible","hideFileRenameModal","showFileRenameModal","showModal","_useRenameFile","useRenameFile","renameFile","onFileRenameOk","fileId","handleShowFileRenameModal","_callee2","_context2","_x2","fileRenameLoading","initialFileName","useRenameCurrentFile","_useHandleCreateFolde","_useSetModalState2","folderCreateModalVisible","hideFolderCreateModal","_useCreateFolder","useCreateFolder","createFolder","onFolderCreateOk","_callee3","_context3","_x3","folderCreateLoading","useHandleCreateFolder","_useHandleUploadFile","_useSetModalState3","fileUploadVisible","hideFileUploadModal","_useUploadFile","useUploadFile","uploadFile","_ref4","_callee5","_context5","_x4","fileUploadLoading","useHandleUploadFile","_useHandleConnectToKn","_useSetModalState4","connectToKnowledgeVisible","hideConnectToKnowledgeModal","_useConnectToKnowledg","useConnectToKnowledge","connectToKnowledge","connectFileToKnowledge","setRecord","_record$kbs_info","Array","isArray","kbs_info","kb_id","onConnectToKnowledgeOk","_ref5","_callee6","_context6","kbIds","_x5","handleShowConnectToKnowledgeModal","connectToKnowledgeLoading","useHandleConnectToKnowledge","_useHandleMoveFile","_useSetModalState5","moveFileVisible","hideMoveFileModal","_useMoveFile","useMoveFile","moveFile","_useState7","_useState8","sourceFileIds","setSourceFileIds","onMoveFileOk","_ref6","_callee7","targetFolderId","_context7","src_file_ids","dest_file_id","_x6","ids","moveFileLoading","useHandleMoveFile","_useFetchFileList","useFetchFileList","pagination","columns","dataIndex","fixed","render","align","SvgIcon","ellipsis","tooltip","text","formatDate","formatNumberWithThousandsSeparator","toFixed","Tag","kb_name","ActionCell","info","FileToolbar","Table","dataSource","rowKey","scroll","scrollToFirstRowOnChange","RenameModal","FolderCreateModal","FileUploadModal","ConnectToKnowledgeModal","FileMovingModal"],"sourceRoot":""}